/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.05.2024 06:08:34

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 986464;
#else
constexpr int kTensorArenaSize = 985440;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,200,200,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[11] = { 13833, -20011, -13483, -17627, -26013, -16280, -28455, -20110, -26528, -19392, -18914, };
const TfArray<1, int> tensor_dimension2 = { 1, { 11 } };
const TfArray<11, float> quant2_scale = { 11, { 0.00039139878936111927, 0.00029515934875234962, 0.00052060396410524845, 0.00041577164665795863, 0.00027789166779257357, 0.00044278803397901356, 0.00025091439601965249, 0.00036079483106732368, 0.00027907011099159718, 0.00040245649870485067, 0.00041894646710716188, } };
const TfArray<11, int> quant2_zero = { 11, { 0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[11*1*1*32] = { 
  /* [0][0][][] */ -28,57,-2,-33,28,-10,31,-40,-74,64,-17,-4,-26,-2,127,-53,31,18,-64,64,67,-13,-63,-59,72,19,35,-47,-15,0,40,-20, 
  /* [1][0][][] */ 59,-58,87,-45,31,16,94,-36,-53,18,82,48,14,-87,-47,26,-6,-127,50,67,-74,23,-37,68,45,83,-69,8,3,49,42,1, 
  /* [2][0][][] */ -15,-30,10,5,-13,56,-16,8,-49,-30,48,11,-50,49,-127,38,-28,50,-31,9,-30,-19,-42,39,-40,21,19,42,47,-42,12,-26, 
  /* [3][0][][] */ 51,57,79,-13,70,-39,-43,0,-13,-13,-49,14,-61,-60,-5,79,38,-127,36,46,-32,36,47,-23,35,5,-9,-2,30,-25,34,65, 
  /* [4][0][][] */ -33,18,82,-43,-19,-70,67,21,112,3,10,-29,63,-20,-97,-44,-45,-127,-88,118,-97,-54,-61,43,28,-68,-22,12,-49,65,-70,95, 
  /* [5][0][][] */ 57,36,25,-44,53,4,-35,2,-43,11,-29,38,23,38,-20,19,-13,-88,-52,-23,-67,-2,-20,-45,74,-23,4,94,127,23,-57,12, 
  /* [6][0][][] */ 115,-35,-40,-74,-44,-77,-85,-87,4,64,-52,35,-22,127,-24,-25,-18,-72,-22,-8,-61,65,-17,37,-80,54,15,-44,62,-57,-5,63, 
  /* [7][0][][] */ -53,-36,40,70,60,54,23,55,-39,55,-60,78,-39,17,-25,-2,68,71,29,-3,-127,-60,-52,108,54,18,-45,-54,35,-87,41,88, 
  /* [8][0][][] */ -39,14,51,-54,-8,7,79,-37,54,-63,25,-34,48,74,-7,88,80,-91,-51,48,-66,54,-11,-5,23,127,-64,-3,-1,-38,-62,-95, 
  /* [9][0][][] */ -55,-18,7,55,-13,23,68,22,12,24,104,114,38,49,-73,8,-21,-127,68,-5,17,0,51,-3,38,-48,2,-24,-73,-9,-67,34, 
  /* [10][0][][] */ -2,57,78,26,38,59,17,11,58,-25,-22,19,-15,60,-79,2,-39,-27,-20,2,-127,-18,44,3,19,9,-13,-117,29,-54,-9,34, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 11,1,1,32 } };
const TfArray<11, float> quant3_scale = { 11, { 0.005341122392565012, 0.0040278155356645584, 0.0071042869240045547, 0.0056737200357019901, 0.0037921767216175795, 0.0060423924587666988, 0.0034240384120494127, 0.0049234931357204914, 0.0038082578685134649, 0.005492018535733223, 0.0057170446962118149, } };
const TfArray<11, int> quant3_zero = { 11, { 0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 47, 694, 79, -879, -394, -1979, -871, -1277, -411, -806, -45, 545, -187, 185, 1165, -267, -1322, 1675, -728, 341, 471, -865, -937, 61, 407, 467, -847, -66, 197, 681, -507, 505, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 0.00015076386625878513, 9.9726734333671629e-05, 0.00010092221054947004, 4.730064028990455e-05, 5.6639561080373824e-05, 5.632042302750051e-05, 4.6495475544361398e-05, 5.0500108045525849e-05, 0.00015906838234513998, 6.3671177485957742e-05, 9.8830045317299664e-05, 0.00010419220780022442, 0.00023049453739076853, 0.00012791766494046897, 0.00019233656348660588, 0.00014814019959885627, 5.0228973123012111e-05, 0.000179624417796731, 5.144526221556589e-05, 8.5830026364419609e-05, 0.00020438861974980682, 4.7980407543946058e-05, 4.8482736019650474e-05, 0.00017673394177109003, 6.9662477471865714e-05, 8.1425787357147783e-05, 5.0590981118148193e-05, 0.00021260416542645544, 0.00014295862638391554, 0.00010812644177349284, 4.4037540646968409e-05, 9.1180314484518021e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -2,10,48,2,28,-2,-27,-21,127,-26,-32,10,17,-2,-4,20,-10,-5,-2,-20,-8,-32,2,37,-76,-1,28,-11,34,14,1,-22,25,-14,-25,21,-48,-38,-41,4,6,-29,-51,24,40,-33,36,13,-14,-13,12,-45,-9,-34,-31,31,-15,23,71,-26,-9,29,-57,15,2,6,25,26,12,52,33,-27,40,-36,23,3,-16,-64,-20,30,24,42,55,74,9,-16,-31,102,3,32,-7,-25,12,7,23,-12, 
  /* [1][0][][] */ -15,-14,-52,16,1,-5,8,-38,-50,3,-74,38,38,-6,31,12,-2,-43,62,59,-8,3,-2,21,-100,57,-11,39,6,-4,55,-36,64,58,4,20,-1,45,-13,-42,-54,19,-30,-49,-19,1,-1,-22,-42,8,77,72,-47,40,-51,-26,-54,45,-26,22,-49,64,-76,-37,-14,24,51,7,43,14,34,29,-62,127,-28,4,-1,73,-8,-4,-21,10,-1,-108,-14,24,-84,-65,81,107,19,14,-16,-19,15,51, 
  /* [2][0][][] */ 28,20,-30,33,1,-71,36,46,-47,38,-24,31,47,-22,47,-47,-35,-10,-22,26,-47,-4,47,26,-93,31,54,11,-23,44,37,41,-12,0,-31,-55,-58,30,30,-15,-103,-58,-28,-5,-42,53,1,-40,17,14,38,-119,-35,29,-28,15,-111,53,-61,3,-14,34,-101,29,43,30,25,44,-38,-8,4,-26,23,-62,22,-24,-28,-29,10,1,17,-83,-30,-106,-3,-50,-35,-10,45,29,-19,15,-65,-127,-41,-67, 
  /* [3][0][][] */ 47,-19,18,-39,-84,25,-121,18,31,4,39,-12,65,70,48,-13,75,69,-69,-5,87,-97,-80,-123,-36,-120,-94,78,22,-106,57,-14,-68,-52,-34,-31,-99,-39,21,23,-45,-100,-105,-17,50,5,-63,-93,42,-95,18,9,67,9,63,-110,-120,-127,-125,-75,-105,16,-49,48,31,-50,-73,-46,-49,-84,-16,72,1,-111,32,-61,9,71,68,-72,-101,-127,17,88,9,24,-61,-124,-91,34,-16,-118,70,-101,-105,20, 
  /* [4][0][][] */ 27,67,-8,28,-29,-33,12,23,18,50,-14,27,12,-58,-15,-37,-21,-8,-56,3,72,-89,52,13,-48,-21,48,-58,-43,28,-61,-51,35,76,2,-75,-55,-19,-89,31,-61,-60,-62,-73,16,84,17,54,5,-55,-21,-101,-71,38,-71,4,-9,-79,17,3,11,-66,-50,-63,-41,30,15,-28,13,-87,-93,-74,-50,18,78,25,45,-25,-20,-45,-3,-37,-84,-54,8,52,39,10,-127,-78,22,25,18,75,-108,-58, 
  /* [5][0][][] */ 60,-101,10,26,-15,-127,-20,5,31,-114,-46,-79,-21,72,-19,36,7,6,-76,29,-25,36,0,-63,-101,-69,-56,-111,8,-19,-29,-122,-72,-39,-81,-28,-126,-44,-11,-22,-109,-39,5,40,-67,-15,26,-43,-118,51,-25,47,-8,-20,-28,-27,64,-7,-34,-72,2,-96,1,-72,-70,30,-57,-20,10,-42,67,-99,-36,60,-35,-106,-36,-79,-33,62,33,-21,4,58,-44,12,-8,5,41,-117,85,25,-57,-12,9,-77, 
  /* [6][0][][] */ -4,-58,90,44,-94,-80,6,47,-31,-96,-14,-106,62,32,87,-110,11,-16,-26,72,-93,-117,77,36,-67,-95,-26,-70,-45,-114,21,-95,-103,-127,-62,-116,-24,14,-117,67,62,45,-1,-18,-113,75,-101,-60,-70,-7,-47,-50,37,-72,93,-41,-6,-24,-85,84,-101,-2,59,-74,-69,47,78,-44,50,-31,-119,-27,50,-86,-90,-40,-81,-115,-73,-34,11,-32,18,-15,-50,-103,-60,-105,63,72,74,0,-73,-82,46,-47, 
  /* [7][0][][] */ 67,36,-60,-68,-93,75,-47,-28,83,-29,-111,-15,16,-106,7,36,19,-16,-32,65,17,-2,-36,42,-72,55,3,22,-99,61,-48,3,-10,-11,24,58,-111,49,-35,-53,58,-89,46,32,12,-31,55,-120,15,-81,-125,-56,-52,52,-12,-7,81,-108,-25,-74,-14,-34,45,-127,-91,-79,28,-7,-123,-11,27,41,42,-2,21,30,-78,19,-117,13,47,-58,-48,-33,48,4,-123,60,38,-8,47,25,-75,-59,-34,-71, 
  /* [8][0][][] */ -1,4,-50,-35,15,4,-42,-21,-35,30,2,18,1,-15,-11,-30,-27,22,-9,5,37,-9,20,40,0,34,8,17,-33,-12,-37,35,55,-9,11,11,32,-38,-38,-9,23,6,-28,-58,15,-14,-20,17,30,-13,14,24,-35,-10,-28,-41,-34,27,-57,26,-14,18,7,12,-18,-7,-16,14,-33,37,24,14,-1,15,-13,-23,-15,127,32,5,-2,-3,-60,-68,-1,-3,27,-45,-5,-27,-34,27,-49,21,29,11, 
  /* [9][0][][] */ -16,-7,59,12,38,-85,-49,-93,7,16,-26,17,-35,-73,-85,-28,-8,-14,-81,-62,-16,47,-94,-87,25,-26,-24,5,-27,-56,-79,51,21,-17,-2,-29,-72,-14,-37,-30,10,-19,31,-76,36,-2,-88,27,40,-28,-69,-17,19,-65,-71,52,35,-56,-26,-19,-79,54,47,-76,-74,-14,57,17,-41,58,53,-87,-11,30,-86,-93,-68,-127,-52,57,2,-8,47,-44,-45,-78,1,-59,43,2,-34,53,59,-14,-21,-39, 
  /* [10][0][][] */ -16,20,42,-29,-5,67,68,39,43,45,-10,-84,59,41,-6,3,-75,66,-52,-13,-53,32,40,-20,4,36,-51,-25,-15,26,-52,-40,53,64,66,60,-11,41,-29,19,-32,-5,-49,-2,-65,-31,18,-23,70,-3,-3,-127,17,14,-95,-2,-75,12,30,-67,-93,30,94,26,58,-26,-53,3,12,-17,-44,-28,62,54,-36,4,-33,10,46,25,26,-56,38,27,-25,5,41,-13,32,-30,-17,-21,-26,-76,-53,-66, 
  /* [11][0][][] */ 68,10,5,51,53,39,42,20,63,48,-31,49,8,-32,20,-16,-43,-32,-4,13,-3,41,21,-43,-56,-31,-2,53,44,26,26,13,-31,-12,39,39,-35,4,-15,-23,-4,7,-37,12,-22,-15,-25,-62,13,41,31,-71,-32,-50,-7,24,-54,-5,-27,-33,-60,47,53,22,20,57,-37,32,49,24,-34,-20,40,-28,-22,22,-40,-65,1,28,-29,-16,-16,-12,41,-56,13,-5,-12,-36,18,-20,-48,-127,-34,-47, 
  /* [12][0][][] */ -3,12,-16,-2,9,-1,-5,-2,-5,0,-8,-2,-16,3,4,-22,-20,-15,-17,-19,3,-6,-1,13,-10,-19,11,-13,11,-1,-15,13,-20,-17,-11,6,-12,-16,-15,3,32,26,1,-17,-5,-22,-13,21,-30,-26,-25,127,3,-7,-7,10,-10,-20,4,9,14,16,4,4,9,2,-13,20,4,23,6,9,18,13,-9,19,-8,12,-25,-21,-14,20,20,59,-7,3,5,40,-23,-13,16,6,13,-10,8,15, 
  /* [13][0][][] */ 47,-23,46,43,28,56,17,52,8,-19,10,-3,36,25,33,-24,-52,-27,-40,15,26,8,49,-13,-60,18,6,15,-29,-35,33,33,25,43,5,44,-24,20,16,21,-47,3,-6,5,-2,1,1,-6,-4,51,-6,-64,-40,10,-31,-19,-54,14,-19,-28,-1,48,-40,8,-15,-14,-43,25,-2,9,38,16,-40,37,-31,-33,-39,45,41,-36,22,-70,60,44,-33,-67,33,35,-14,-50,-18,27,14,-127,46,-66, 
  /* [14][0][][] */ -9,7,19,36,25,-26,22,-37,-62,-13,26,22,-11,-20,-36,-12,3,-22,22,12,-22,-12,-6,4,12,-8,-20,21,-18,-26,13,12,15,3,-7,14,12,33,29,-56,59,83,-4,4,1,-2,8,14,-10,24,8,127,28,-10,60,-8,11,-4,8,34,-5,-30,35,39,-27,5,28,-12,-17,-38,-25,29,-4,24,17,58,1,-47,-7,16,15,11,-48,0,-24,58,-30,7,20,78,62,-11,47,-6,-9,76, 
  /* [15][0][][] */ 16,-30,-3,22,36,-21,2,-25,8,5,-31,24,41,1,-15,-45,38,-6,-25,8,14,12,25,54,-27,24,29,23,12,11,34,-28,12,8,-16,-1,-56,23,34,-29,-46,6,-40,-19,-1,-23,3,-43,-25,-13,6,-28,-42,-59,-65,9,-4,26,-40,60,0,-16,-51,22,2,31,-8,1,-12,5,30,-30,7,-12,14,-95,-3,69,38,10,-18,2,-39,-127,-49,-29,-29,3,24,11,-46,2,3,43,-63,6, 
  /* [16][0][][] */ -91,-24,63,-81,2,64,-82,11,28,8,-120,36,-43,-70,-76,-76,72,35,37,22,73,39,-67,12,-54,17,-90,23,-117,-16,2,-17,-122,34,17,57,-59,25,-64,-93,16,-65,28,45,16,61,55,-33,-85,-119,-16,29,-66,79,40,6,-9,43,30,-12,76,60,3,20,13,-22,-51,56,8,61,-54,-40,-5,59,25,51,-35,73,-127,-34,-18,-73,22,-2,-17,66,57,-9,38,-3,-34,64,61,-8,-106,5, 
  /* [17][0][][] */ 17,-48,60,28,-12,-56,8,8,43,-18,42,-29,21,29,-45,21,14,34,10,14,-23,-9,-4,-41,40,32,-27,-7,26,-6,4,10,-11,1,7,0,-35,110,25,-56,25,43,52,-10,-28,29,26,-43,-8,41,-32,103,4,41,77,-27,10,4,-7,-38,37,-46,15,33,-21,-14,23,12,-32,-49,25,16,7,-17,1,127,-24,6,0,-44,25,-25,10,77,-44,52,20,26,35,44,-6,-33,17,-23,-14,47, 
  /* [18][0][][] */ -97,66,76,-81,-19,-108,-73,-11,-26,50,-108,-27,-47,13,34,-39,31,-34,61,-37,67,-58,-3,-77,10,-95,-29,75,24,13,-14,2,22,-40,-107,-81,-44,24,-50,36,-24,13,-55,-24,-110,30,21,12,0,-16,51,10,-107,-26,23,53,-26,11,-4,-84,52,74,-13,36,-71,-115,-36,61,39,-63,-79,73,-99,-27,-90,-107,29,32,-21,-76,-61,4,-38,-127,100,-44,67,32,-107,-75,-64,72,78,-26,20,-28, 
  /* [19][0][][] */ 21,11,32,15,44,-117,42,53,115,-10,22,-55,-25,12,-4,18,25,-25,20,45,3,54,-11,41,-48,-21,26,-11,-40,-51,-45,21,94,-19,43,-1,3,-39,-62,-95,-11,-77,-70,-23,-84,13,66,-76,25,13,-15,-1,-33,19,-21,-3,-7,71,-50,-17,2,-16,13,22,-29,22,-26,15,2,-4,71,-4,-4,-91,-28,-77,-12,-80,40,49,34,-127,-42,-33,-53,-18,10,27,88,8,-10,51,-54,-3,38,-31, 
  /* [20][0][][] */ -7,12,17,52,-18,15,17,7,6,-19,-13,-2,-7,25,2,-16,-8,-17,-38,-3,2,-21,-20,-16,58,-20,-26,13,6,2,-12,13,17,10,-4,44,9,2,-4,-31,27,32,72,-25,-13,-12,-26,23,-25,-24,-40,127,17,18,99,-6,47,8,6,16,25,-16,-11,-4,-12,-11,-15,8,-19,-6,-13,19,-14,-17,6,47,24,-14,10,25,32,21,9,53,9,35,1,18,5,89,24,17,10,-15,-1,104, 
  /* [21][0][][] */ 53,50,46,-114,70,-78,39,-1,-21,-76,-81,23,-15,9,-61,-101,-108,-41,40,-30,78,-65,43,-91,11,-100,-45,46,-11,-16,-31,-43,-13,-2,-102,-127,80,60,-125,-44,-51,-37,-10,-30,-97,-92,-94,59,-22,-67,-20,8,13,43,-104,-1,-80,30,-69,87,31,-83,-18,-43,56,8,-49,-82,-110,-24,32,54,8,-39,45,30,-121,-47,38,72,-7,34,17,-88,-4,-107,35,-93,-117,36,69,-118,-56,-82,65,-65, 
  /* [22][0][][] */ 3,-67,-83,-107,58,-68,75,35,-104,52,-88,-110,79,-124,-123,-93,17,54,-114,-75,57,-88,4,8,60,-30,-122,69,-76,-87,-84,-118,22,32,-7,-9,-13,-32,-67,-121,-18,-30,-24,66,29,-125,57,-36,-75,-99,-17,-29,-78,-99,-61,7,-30,-48,-42,-46,80,-86,-88,-127,-80,-5,-118,-59,79,73,-44,-25,-81,-9,38,-96,20,-62,33,66,74,-111,-90,-107,49,56,64,-44,-73,15,-78,33,11,3,-49,71, 
  /* [23][0][][] */ 23,-19,2,7,27,-31,1,-13,42,-27,33,16,11,-32,8,-9,44,3,-55,25,24,-17,36,-6,4,-10,28,11,23,16,22,8,-10,13,12,-10,41,-11,-19,12,-50,-15,-19,-19,-29,-16,32,-15,25,-31,-38,-127,25,-6,-37,31,-31,7,27,25,-9,-20,-23,3,11,17,-28,-26,20,-28,29,-18,4,-40,-4,-43,27,-41,33,20,-18,-41,10,-21,24,0,43,6,-18,-16,19,3,15,-27,-17,-14, 
  /* [24][0][][] */ -39,-5,-59,-47,-57,-78,-30,-47,22,63,47,9,67,53,-16,-46,-49,35,1,-36,64,-67,-41,-27,37,-23,47,44,78,51,3,-45,-9,14,40,19,-76,-66,36,-20,-24,-49,64,7,20,-11,26,65,-94,-22,-22,79,55,32,34,-42,-19,41,-5,-5,55,-4,20,62,-68,68,-21,-37,-63,19,-53,-10,-19,19,72,76,37,-127,-73,-40,-46,-53,-55,-102,39,40,-21,-61,7,-85,44,-46,-16,0,-64,-20, 
  /* [25][0][][] */ -25,-24,-30,6,66,-73,-62,53,76,-57,-2,58,55,26,-52,-30,-43,29,2,-56,19,78,13,1,-77,-19,-37,11,66,-42,45,64,89,-47,45,38,26,-31,-3,-24,-80,40,-101,-36,42,19,59,10,-127,79,-68,-22,42,-5,-89,29,-19,40,-58,53,87,28,-48,42,6,42,-5,5,-47,-29,30,-64,40,-61,44,-36,48,94,8,8,45,51,-37,34,-42,-33,-15,-9,3,-50,50,39,-96,-73,-13,-90, 
  /* [26][0][][] */ 25,-114,-31,-27,-103,-14,-26,-30,-103,-123,72,55,-87,-58,-9,-31,79,5,-87,-77,-2,44,64,-8,62,35,-9,25,-6,-10,-97,-17,-40,-71,-104,-92,-69,56,-61,74,-91,79,44,10,-77,43,-56,70,-40,5,-16,127,-8,-55,-12,-110,103,35,28,5,-12,-95,45,-37,78,-32,-66,32,-90,54,54,62,49,-102,-92,0,24,-107,-101,-7,-40,65,53,-37,50,-17,-58,-2,-82,111,-5,-4,-45,87,53,109, 
  /* [27][0][][] */ 14,-8,8,-22,-14,-34,-13,27,57,37,-3,-43,6,31,25,-3,-1,16,29,-6,-17,5,7,16,-6,28,-15,10,15,1,-1,-24,25,25,-9,-41,-19,29,-33,-6,-56,-19,-6,9,21,4,41,19,30,19,23,-127,-9,-26,-60,-2,21,-4,-11,-39,11,-14,-9,16,20,1,-31,15,-3,26,-4,8,36,18,-4,-66,-5,36,36,34,31,-11,69,-21,-16,-25,-16,90,34,-29,-6,-3,16,-2,11,-19, 
  /* [28][0][][] */ 29,15,24,16,-45,-29,-9,-46,-17,-43,1,9,-25,-11,-2,53,11,30,-48,8,-12,9,-36,-30,-80,22,-43,-20,-10,-22,0,-33,-35,3,29,46,-127,-39,-30,-8,25,8,-36,24,-29,5,15,40,-56,-11,-45,-30,-10,-60,-11,21,-3,-22,30,3,-19,-23,-70,14,2,19,-20,44,-30,-11,-39,-14,30,35,16,-39,-63,-3,-32,39,-25,-29,27,-20,51,-52,17,-30,-34,-52,19,-21,-24,6,-38,-28, 
  /* [29][0][][] */ 10,52,54,9,-29,-46,-8,-16,27,-17,-80,-71,41,-34,-33,21,-41,47,47,-9,-51,-13,22,9,15,3,-29,9,-5,3,14,-24,31,-5,-27,-19,1,63,-37,25,10,70,-16,48,-40,30,3,52,12,-35,13,10,40,-28,127,35,-23,19,15,2,-107,38,-40,5,-24,-28,8,70,27,9,19,-38,92,89,48,42,98,-71,-28,81,9,-24,-7,-63,80,66,4,7,-12,73,72,29,-7,1,-27,108, 
  /* [30][0][][] */ 15,-63,-71,24,-96,32,-68,-12,108,-28,3,-38,-111,3,47,13,-14,36,77,-111,30,-104,-109,15,-109,11,-67,114,-18,-106,-90,14,-95,-80,-127,-65,9,-28,-3,25,96,-84,-4,110,91,-44,87,47,-69,59,23,-98,93,-63,-20,88,-80,-54,-78,-53,-98,-14,-82,-27,-115,-83,-100,77,-70,97,32,-29,-100,92,42,-93,-61,-80,-69,-71,21,13,-104,-9,-106,16,-108,96,-42,-124,63,62,-43,-15,16,-81, 
  /* [31][0][][] */ 47,-42,34,50,31,8,-37,-39,11,-8,-28,-57,59,-108,-4,62,5,-26,10,32,56,-15,-16,62,-98,-58,35,36,-33,-9,28,90,20,24,-33,18,49,-73,-39,-61,31,-67,-38,20,5,-9,-21,-14,41,-5,65,-88,-67,-14,-26,11,-95,55,-20,71,-27,13,11,-41,45,75,-7,-25,54,-68,-59,27,-42,-61,22,0,-16,-127,42,19,-22,-29,-1,-5,25,40,-68,28,5,-31,-48,-12,0,30,8,-15, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0064074643887579441, 0.0042383861728012562, 0.0042891940101981163, 0.0020102772396057844, 0.0024071813095360994, 0.0023936179932206869, 0.0019760576542466879, 0.00214625452645123, 0.0067604058422148228, 0.0027060250286012888, 0.0042002769187092781, 0.0044281687587499619, 0.0097960177809000015, 0.0054365005344152451, 0.0081743039190769196, 0.0062959580682218075, 0.0021347312722355127, 0.0076340376399457455, 0.0021864236332476139, 0.0036477760877460241, 0.0086865164339542389, 0.0020391673315316439, 0.0020605162717401981, 0.0075111924670636654, 0.0029606553725898266, 0.0034605958499014378, 0.0021501167211681604, 0.0090356767177581787, 0.0060757417231798172, 0.0045953737571835518, 0.0018715953920036554, 0.0038751633837819099, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 560, -220, 2267, 5056, 3353, -1764, 4852, -1271, -1494, -825, 3012, -2124, 2853, 2672, 315, 1975, -719, -919, -838, 3222, 1939, -855, 1419, -937, 1392, 1643, 1053, 1968, 3855, 1687, 2398, 1434, 948, 2448, 3315, 1926, -19, 1164, 1098, -3526, 380, 2187, 950, 1323, -1852, -294, -1206, 530, -4817, 1237, 813, 2399, 3215, -872, 2730, 1045, 2345, 2587, -369, -1652, -42, 827, 104, 2904, 2903, 2627, 1935, 3752, 2836, -1831, 1077, 4251, 1844, -999, 3555, 11473, 710, -1924, 614, 786, 7567, 1484, -484, 497, 986, 952, 708, -1683, 2299, 1574, 2412, 963, 575, -2010, -17, 5190, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00028172016027383506, 0.00022120393987279385, 0.00026158266700804234, 0.00016012019477784634, 0.00018384176655672491, 0.00023379756021313369, 0.00012098698789486662, 0.00031591436709277332, 0.00030800310196354985, 0.00027766585117205977, 0.00022401713067665696, 0.00021585841022897512, 0.0001937903871294111, 0.00022906136291567236, 0.00020248423970770091, 0.00020676860003732145, 0.00033755798358470201, 0.00022901616466697305, 0.00024231328279711306, 0.00017559202387928963, 0.00017251807730644941, 0.00023320154286921024, 0.00023929648159537464, 0.00028432643739506602, 0.00023824752133805305, 0.00023327572853304446, 0.00023365851666312665, 0.00017785605450626463, 0.00018982673645950854, 0.00020353104628156871, 0.00022173972683958709, 0.00029772930429317057, 0.00036317060585133731, 0.00017804987146519125, 0.00016519550990778953, 0.00030002655694261193, 0.00027671453426592052, 0.0003441742155700922, 0.00026943284319713712, 0.00018950944649986923, 0.00034045235952362418, 0.00018976906721945852, 0.0002266876253997907, 0.00016094294551294297, 0.00020647092605940998, 0.0002100876736221835, 0.00023589191550854594, 0.00019210811296943575, 0.00013983834651298821, 0.00023387349210679531, 0.00032961441320367157, 0.00023131114721763879, 0.00024160364409908652, 0.00019136951596010476, 0.00031170991132967174, 0.00020608975319191813, 0.00023151053756009787, 0.00018588530656415969, 0.00039575772825628519, 0.00017893413314595819, 0.00022208865266293287, 0.00027398412930779159, 0.0003418553969822824, 0.00022981957590673119, 0.00020305428188294172, 0.00017759020556695759, 0.00020596373360604048, 0.0001514447940280661, 0.00020968829630874097, 0.00018911105871666223, 0.0002591910888440907, 0.00015951630484778434, 0.00019980063370894641, 0.00019911699928343296, 0.00019460190378595144, 0.00011288860696367919, 0.00023845532268751413, 0.00036960761644877493, 0.00023386046814266592, 0.00023726980725768954, 0.00010666421439964324, 0.00027399254031479359, 0.0003636167966760695, 0.00031546427635475993, 0.00019427621737122536, 0.00021814747015014291, 0.00023255815904121846, 0.00022588914725929499, 0.000291797099635005, 0.00026573301875032485, 0.00026403396623209119, 0.00015101034659892321, 0.00021260962239466608, 0.00023491992033086717, 0.00031593811581842601, 0.00017711345572024584, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -6,77,-45,3,31,-19,53,51,-11,-12,14,-127,43,94,-95,20, 
  /* [1][0][][] */ -27,-18,-48,-15,39,105,7,-127,7,-50,-50,-11,-16,-25,-68,-34, 
  /* [2][0][][] */ -14,-58,26,43,21,48,-122,127,-22,-23,51,-76,-36,-66,-64,63, 
  /* [3][0][][] */ 62,-66,26,-1,6,-28,-22,127,-41,34,58,30,5,42,0,18, 
  /* [4][0][][] */ -45,-5,14,69,-75,3,0,-102,-38,-14,56,-40,40,32,64,127, 
  /* [5][0][][] */ 106,8,-21,-67,-127,-3,38,118,9,21,69,107,112,57,-76,-32, 
  /* [6][0][][] */ -13,-119,-127,-86,-79,-15,18,2,-55,-39,3,-2,116,76,92,11, 
  /* [7][0][][] */ -31,-7,14,-27,24,-25,-63,34,-100,-22,-76,-47,-127,-10,-5,30, 
  /* [8][0][][] */ 33,18,84,5,67,12,43,30,3,-74,7,1,-127,-30,-71,19, 
  /* [9][0][][] */ -54,47,24,-78,-51,-20,35,-28,-11,42,-18,8,24,127,-4,37, 
  /* [10][0][][] */ 57,38,-23,-46,-15,-7,49,-55,-74,-62,-47,-91,-127,-114,-46,63, 
  /* [11][0][][] */ 42,69,46,51,-54,-38,29,105,-93,0,-14,9,-14,1,67,127, 
  /* [12][0][][] */ -70,1,17,3,44,5,117,27,-45,50,-7,-53,31,68,-30,127, 
  /* [13][0][][] */ 4,-127,34,85,94,20,44,28,31,77,-75,-69,58,71,3,-19, 
  /* [14][0][][] */ -112,74,29,-67,-54,19,24,58,6,20,111,-54,-106,32,-127,25, 
  /* [15][0][][] */ -8,-69,-127,-28,84,-56,-100,-81,-43,-29,-9,-55,-3,-111,-41,69, 
  /* [16][0][][] */ 119,24,-7,6,42,-6,25,-53,-14,-13,127,71,-18,-14,-38,26, 
  /* [17][0][][] */ 23,17,-41,-77,0,-45,88,-127,36,-10,-55,29,72,82,40,30, 
  /* [18][0][][] */ 11,122,5,-85,8,-65,1,-26,-9,127,4,2,-31,25,-28,-2, 
  /* [19][0][][] */ -61,-57,99,-127,31,-70,28,-15,64,13,116,79,-26,-12,56,7, 
  /* [20][0][][] */ -11,101,34,59,-11,-16,39,-26,34,-16,116,-7,-127,-55,-100,-4, 
  /* [21][0][][] */ -69,2,94,22,41,45,74,64,-127,103,-34,-50,-22,70,-47,4, 
  /* [22][0][][] */ -9,-67,52,21,-11,-123,127,42,-7,-31,8,-74,39,-65,-75,-8, 
  /* [23][0][][] */ -47,-40,89,29,7,7,-2,-43,71,13,77,5,-54,54,50,127, 
  /* [24][0][][] */ -22,35,125,124,10,-28,-58,-75,93,-3,-127,18,0,38,-71,-95, 
  /* [25][0][][] */ -20,41,70,-38,-60,-25,26,8,32,106,-16,-12,1,127,51,11, 
  /* [26][0][][] */ -62,92,12,26,25,-65,5,-30,-5,11,18,54,18,-14,-69,127, 
  /* [27][0][][] */ -15,-81,-51,39,-80,108,-7,-38,44,-52,90,-85,14,-7,-127,-19, 
  /* [28][0][][] */ -25,3,-2,127,39,-1,-37,-94,-101,19,59,-22,83,-15,-47,-18, 
  /* [29][0][][] */ -127,83,-68,-49,-6,25,-111,-121,-49,-30,-12,-2,46,-36,-118,49, 
  /* [30][0][][] */ 33,98,-52,58,-59,-65,-51,7,-59,1,25,-87,127,-14,-17,85, 
  /* [31][0][][] */ 82,108,-27,-32,-79,-25,127,49,-82,-28,66,23,41,-5,-56,18, 
  /* [32][0][][] */ -27,-21,127,21,7,33,68,-15,2,2,7,-14,-26,66,27,50, 
  /* [33][0][][] */ 1,28,-52,-71,-34,14,50,79,64,9,33,-79,19,127,-45,-6, 
  /* [34][0][][] */ -62,-49,103,-24,25,-15,82,10,-127,3,-27,-96,8,93,-58,-70, 
  /* [35][0][][] */ 22,-15,-54,16,-20,127,-37,31,-72,104,-9,92,-29,113,2,-32, 
  /* [36][0][][] */ -25,-92,127,-42,-73,3,-1,-56,-14,-41,-21,107,-25,-113,-27,79, 
  /* [37][0][][] */ 49,3,87,-39,42,13,-66,71,-30,29,-17,43,-127,-18,29,-15, 
  /* [38][0][][] */ 23,36,-35,-36,-20,-34,-51,64,-68,40,-49,-16,-21,-127,-48,27, 
  /* [39][0][][] */ -48,-15,-43,-36,-79,-47,56,33,-127,-47,-15,108,23,-45,25,17, 
  /* [40][0][][] */ 111,63,-13,-127,-65,13,28,-22,6,-60,-68,-52,40,78,11,-42, 
  /* [41][0][][] */ 89,-57,-80,-100,-37,11,-50,56,127,-72,40,-50,72,-7,49,-41, 
  /* [42][0][][] */ -17,-75,-79,123,12,-78,-127,88,42,-31,-2,50,-36,68,-52,5, 
  /* [43][0][][] */ -76,-81,-70,-57,-16,25,-18,46,-96,-101,-63,68,127,-97,-50,83, 
  /* [44][0][][] */ -3,95,14,53,-13,-27,12,73,127,-6,108,113,82,66,4,-3, 
  /* [45][0][][] */ 25,69,-86,43,127,-38,-58,-57,86,-61,40,-28,-23,-4,-47,33, 
  /* [46][0][][] */ -19,-68,-8,-18,101,-25,26,-40,-18,76,-61,-127,57,55,-20,70, 
  /* [47][0][][] */ 114,-92,-69,68,127,-8,-95,-74,1,111,-80,45,-22,-116,-26,0, 
  /* [48][0][][] */ -11,-4,-7,-127,-7,-61,104,-101,41,-12,-53,21,1,41,-28,60, 
  /* [49][0][][] */ -39,91,-53,21,33,-58,81,75,-41,41,29,-127,18,74,79,-64, 
  /* [50][0][][] */ -4,33,-18,-29,-127,4,-50,-61,53,86,39,4,-23,-15,-21,47, 
  /* [51][0][][] */ 121,-120,-109,11,-45,127,-31,-35,32,-118,19,-35,-20,82,2,39, 
  /* [52][0][][] */ -14,-75,42,127,-17,-74,-95,-22,-75,-81,-71,-5,45,-48,20,25, 
  /* [53][0][][] */ 44,120,73,-111,-11,127,86,-42,14,-6,3,-35,76,-74,46,33, 
  /* [54][0][][] */ 46,56,41,12,34,-82,-127,91,38,-88,-83,113,96,109,-53,66, 
  /* [55][0][][] */ -33,-26,12,29,60,-36,91,55,-126,-25,10,50,127,4,-83,25, 
  /* [56][0][][] */ 117,68,25,79,-25,73,-70,-101,76,120,-42,8,-43,127,38,82, 
  /* [57][0][][] */ -71,8,-1,-23,-93,-123,127,13,-86,-27,92,51,-13,-7,-62,108, 
  /* [58][0][][] */ 12,-48,-15,-46,8,-42,-20,-44,6,25,-127,-8,47,-7,-36,26, 
  /* [59][0][][] */ 63,44,-111,127,13,24,121,-75,-69,-41,63,-100,-126,-34,39,127, 
  /* [60][0][][] */ 22,58,-5,64,-37,4,-48,38,-28,-101,48,104,-58,-127,-28,-23, 
  /* [61][0][][] */ -54,23,109,-15,-99,34,33,127,24,-27,72,5,62,39,-13,75, 
  /* [62][0][][] */ 71,13,18,-127,-18,-5,12,-35,-18,-13,-25,52,-12,-23,-100,-60, 
  /* [63][0][][] */ -12,-31,9,27,-35,-66,-38,-21,-51,-7,-19,-51,127,30,42,2, 
  /* [64][0][][] */ -8,-33,-52,-5,-69,-24,-10,-86,22,83,24,0,63,-56,-82,127, 
  /* [65][0][][] */ -33,41,-31,11,-42,73,24,-23,33,-108,109,-88,76,62,-127,75, 
  /* [66][0][][] */ -74,127,-80,-24,-22,-20,-85,-15,-36,100,83,41,-80,-53,62,26, 
  /* [67][0][][] */ 1,-60,-127,-69,51,86,0,-10,-11,17,57,-17,41,43,9,37, 
  /* [68][0][][] */ 34,-12,-32,-62,-41,27,19,-4,-73,59,72,6,11,-50,-127,20, 
  /* [69][0][][] */ 21,-33,72,1,-60,-127,-4,96,75,108,117,44,11,110,-59,9, 
  /* [70][0][][] */ 28,-23,127,87,59,-23,103,-14,-15,9,-63,17,-32,72,-9,29, 
  /* [71][0][][] */ 23,56,101,-87,-127,-67,-3,26,-3,-38,-9,-77,-88,9,24,5, 
  /* [72][0][][] */ -66,-127,13,-91,68,4,19,-13,-57,50,-119,-23,63,86,-85,106, 
  /* [73][0][][] */ 49,-7,63,55,111,-84,-55,-35,-49,127,-90,-41,-15,-59,88,-16, 
  /* [74][0][][] */ -71,40,-127,-54,60,-24,-42,16,-46,23,-94,4,-19,-62,-9,56, 
  /* [75][0][][] */ 108,14,16,-21,5,-21,-122,31,46,-127,41,-36,42,21,4,-44, 
  /* [76][0][][] */ 27,-17,66,124,43,59,54,-24,21,-91,52,127,10,-81,-48,28, 
  /* [77][0][][] */ -11,-50,127,52,42,2,-16,-51,5,-12,13,20,28,61,50,-22, 
  /* [78][0][][] */ -105,-24,53,-34,-30,-125,100,-36,6,-11,67,-127,-111,-74,-116,10, 
  /* [79][0][][] */ -95,-32,-24,40,127,24,-19,10,4,-1,-49,52,-35,-46,-102,-24, 
  /* [80][0][][] */ 27,-127,86,108,-2,-13,-115,23,10,17,27,-19,-87,1,22,39, 
  /* [81][0][][] */ 85,71,33,127,11,7,8,118,56,17,99,73,41,47,80,-6, 
  /* [82][0][][] */ -42,-30,12,0,17,-78,-88,-44,56,82,-27,-75,1,127,-58,-44, 
  /* [83][0][][] */ 62,25,127,-13,-73,-21,-59,-9,-44,-93,50,-19,-69,-18,-31,-12, 
  /* [84][0][][] */ 2,-60,-108,-17,127,49,21,-4,-90,10,-105,-13,54,20,-81,-4, 
  /* [85][0][][] */ 44,127,86,-123,67,79,22,-21,101,-73,18,-24,66,-45,20,-37, 
  /* [86][0][][] */ 107,-49,84,21,-11,-87,87,51,-86,-65,-127,-51,30,18,-98,-21, 
  /* [87][0][][] */ 4,54,86,32,68,-45,-56,53,33,-127,84,-56,-99,-104,-6,19, 
  /* [88][0][][] */ -65,-41,91,6,11,-8,-36,-66,12,24,-35,-127,-67,-23,-21,21, 
  /* [89][0][][] */ -97,67,73,-66,-18,127,-122,-29,83,-39,-86,-31,41,-63,3,-31, 
  /* [90][0][][] */ -4,16,-11,-70,127,26,-37,8,70,36,17,-8,38,30,-45,-22, 
  /* [91][0][][] */ -32,-120,84,60,-69,22,-4,64,-37,-96,98,-47,-31,94,63,127, 
  /* [92][0][][] */ -13,100,-65,-46,-11,-12,-127,90,30,4,113,0,0,117,95,56, 
  /* [93][0][][] */ -28,75,-24,-48,35,45,-71,-47,91,106,67,55,-127,45,-45,111, 
  /* [94][0][][] */ 18,46,127,3,-109,-36,22,-32,33,-19,23,-9,-31,25,-2,-42, 
  /* [95][0][][] */ -13,115,64,-12,82,-45,-127,84,107,55,-79,82,25,-59,33,83, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0027455799281597137, 0.0021558026783168316, 0.0025493244174867868, 0.0015604945365339518, 0.0017916795331984758, 0.0022785372566431761, 0.0011791113065555692, 0.0030788285657763481, 0.0030017273966223001, 0.0027060674037784338, 0.0021832194179296494, 0.002103706356137991, 0.0018886364996433258, 0.0022323792800307274, 0.0019733647350221872, 0.0020151191856712103, 0.0032897624187171459, 0.0022319387644529343, 0.0023615295067429543, 0.001711279503069818, 0.0016813215333968401, 0.0022727285977452993, 0.0023321283515542746, 0.0027709801215678453, 0.0023219054564833641, 0.0022734515368938446, 0.0022771821822971106, 0.0017333441646769643, 0.0018500076839700341, 0.0019835666753351688, 0.0021610243711620569, 0.0029016011394560337, 0.003539377124980092, 0.0017352331196889281, 0.0016099574277177453, 0.0029239896684885025, 0.0026967960875481367, 0.0033542425371706486, 0.0026258304715156555, 0.0018469154601916671, 0.0033179703168570995, 0.0018494456307962537, 0.0022092454601079226, 0.0015685128746554255, 0.0020122181158512831, 0.0020474661141633987, 0.0022989483550190926, 0.0018722414970397949, 0.00136283237952739, 0.0022792771924287081, 0.0032123462297022343, 0.0022543051745742559, 0.0023546135053038597, 0.0018650431884452701, 0.0030378529336303473, 0.0020085033029317856, 0.0022562483791261911, 0.0018115954007953405, 0.0038569637108594179, 0.0017438508803024888, 0.0021644248627126217, 0.0026701863389462233, 0.003331643994897604, 0.0022397686261683702, 0.0019789203070104122, 0.001730753225274384, 0.0020072751212865114, 0.0014759461628273129, 0.002043573884293437, 0.001843032892793417, 0.0025260166730731726, 0.0015546091599389911, 0.0019472109852358699, 0.0019405484199523926, 0.0018965452909469604, 0.0011001863749697804, 0.0023239306174218655, 0.003602110780775547, 0.0022791502997279167, 0.0023123768623918295, 0.0010395249119028449, 0.0026702682953327894, 0.0035437254700809717, 0.0030744422692805529, 0.0018933712271973491, 0.0021260150242596865, 0.002266458235681057, 0.0022014635615050793, 0.0028437874279916286, 0.0025897729210555553, 0.0025732142385095358, 0.0014717121375724673, 0.0020720444153994322, 0.0022894754074513912, 0.0030790602322667837, 0.0017261069733649492, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 326, 6336, 2293, 7007, -6661, 1412, 5764, 8514, 8633, -6622, 4145, -2212, -17, 12133, -7727, 13825, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.0989932788070291e-05, 9.4682858616579324e-05, 0.00013651694462168962, 0.00014690987882204354, 9.1139081632718444e-05, 6.999918696237728e-05, 7.6178963354323059e-05, 9.0895387984346598e-05, 0.00010173550253966823, 0.00012225536920595914, 8.4408420661929995e-05, 8.0381018051411957e-05, 9.990225953515619e-05, 0.00010746933548944071, 7.7581993537023664e-05, 0.00010604057752061635, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -75,-5,25,-18,-51,-20,-62,-14,0,8,-23,-31,39,93,42,-53,31,-13,86,4,-3,-21,109,56,69,-49,-9,37,-54,-127,-97,-13,-23,-41,13,-41,28,-26,26,8,-20,41,-69,27,8,-48,6,87,-34,-39,-45,-32,71,-22,12,-51,-89,25,-38,17,94,14,13,26,-4,-74,16,-5,0,-57,-19,9,-62,-14,-61,4,-35,42,-15,-29,-63,87,73,-53,-1,61,16,39,8,-23,11,21,-60,-27,-10,-2, 
  /* [1][0][][] */ 15,-18,48,-47,-70,-43,-2,26,28,-29,83,-86,102,40,-50,-13,-59,-30,-62,-23,-2,-37,-17,17,121,-14,2,-20,8,-127,92,-33,75,28,11,-36,-14,51,21,-67,35,-2,27,74,33,-9,-71,-75,-14,31,-6,-67,54,-75,2,71,-15,4,-23,-32,56,89,-26,-63,-49,-23,-29,42,31,45,-36,-23,-75,-56,14,-67,4,15,38,-42,2,-82,-47,3,28,17,-29,44,-69,-11,-72,39,26,40,-33,88, 
  /* [2][0][][] */ 27,-42,-33,-6,24,-67,-15,13,-23,-9,-36,40,-46,-4,-5,-31,-17,-71,-27,16,-7,-29,-55,19,-8,14,13,24,-45,8,-42,71,-22,58,5,22,21,28,-21,26,-98,1,-9,-33,-20,-46,69,-31,31,-23,-38,0,18,-10,-50,47,12,17,10,-6,-25,22,3,18,-26,29,-22,22,47,9,-33,-42,7,7,58,38,8,-54,19,127,43,-19,-18,5,-39,19,60,80,-17,33,44,-1,-20,85,-26,88, 
  /* [3][0][][] */ 2,48,15,-127,5,-38,-8,-42,-20,26,7,43,69,-3,-100,1,-10,9,49,29,-8,65,34,-21,34,-34,-33,49,39,-23,8,27,-70,44,-9,-2,0,105,21,-16,-29,-9,0,30,-53,46,72,13,-15,-68,-6,31,-26,-58,-71,-17,-18,-7,18,-19,-7,15,37,11,-45,42,-60,-14,6,-73,-16,-56,-27,10,11,-24,54,-40,-35,57,-45,-1,-83,10,-15,11,32,-48,-35,20,33,-14,53,-4,7,52, 
  /* [4][0][][] */ 19,-3,-37,28,45,15,-33,-21,-60,90,5,52,4,-1,-8,-87,15,-2,-14,40,15,-53,99,65,-5,-28,-50,33,-15,-50,-17,-6,-75,-33,5,53,60,42,22,35,-23,-19,11,-31,-12,90,-10,106,-41,-46,7,25,4,-41,-39,58,26,-17,6,71,10,-35,73,16,-20,54,-94,-24,-27,-15,-90,33,30,5,-38,-48,34,-52,3,1,-84,127,-71,-9,-37,0,-11,-105,70,-13,94,30,-1,-71,65,-31, 
  /* [5][0][][] */ -55,41,38,37,14,47,37,-67,21,12,-4,-7,71,-3,47,-36,29,-39,75,65,-98,13,-46,43,-66,-65,44,45,68,-104,-22,48,50,105,-56,-37,-12,24,81,-38,-39,127,39,-6,72,32,15,34,-35,35,-65,1,31,7,46,-85,9,-16,-80,-75,97,42,-84,30,84,-122,-94,-96,-24,-12,-88,47,-51,-2,-35,-91,25,-18,-8,-44,95,16,29,-73,-79,33,38,2,-27,38,58,87,-17,4,25,71, 
  /* [6][0][][] */ 44,-30,-61,47,3,-68,40,63,-65,30,-4,74,-112,-95,52,39,19,-16,3,-30,29,-35,-80,-49,-29,72,5,4,-9,23,28,-34,17,0,55,8,6,7,-3,86,25,-41,-52,-36,-57,-57,-33,-33,45,-70,8,88,-4,48,-29,-64,48,44,28,16,-127,65,-80,-45,12,58,0,33,-1,-24,34,-60,63,1,42,36,71,-14,77,24,28,-75,-59,63,12,-104,26,38,-56,47,17,-42,-30,11,-46,97, 
  /* [7][0][][] */ -14,68,-22,-121,-57,-52,-5,5,25,11,-14,-10,-31,25,-64,14,-87,8,-52,24,28,119,-38,-14,-27,40,9,1,-14,53,54,-16,49,28,-5,-6,-25,11,-2,-5,-53,-7,58,-19,-9,-111,127,-81,-7,60,-45,-24,-6,-10,-15,-63,91,-25,-51,-54,-33,88,39,-50,-35,35,19,24,-3,3,-12,-8,12,48,10,67,-51,41,-42,-12,4,-34,99,-36,29,33,22,31,-78,47,-61,9,46,15,-46,18, 
  /* [8][0][][] */ -22,43,-65,20,-40,-8,-48,29,-91,-73,31,-23,-2,79,52,93,13,-87,-10,21,25,0,5,-6,-62,70,27,36,15,-61,-61,-6,-5,-21,-35,-107,-40,27,38,-20,-3,30,56,10,27,-35,-20,12,-4,11,32,34,24,-44,-64,127,-39,-20,-4,-74,6,-13,-32,71,-55,-55,-76,10,23,30,18,27,-84,-56,-90,-35,-60,49,-69,-60,-5,0,-35,-41,-18,65,13,62,4,31,-57,32,-107,-102,0,-57, 
  /* [9][0][][] */ -14,15,-34,46,16,-6,28,78,-25,-5,-28,32,-3,-17,43,91,-1,17,16,-28,-22,14,39,-99,-7,20,45,-22,23,-4,41,67,-7,10,14,-59,-22,12,-66,11,39,-36,57,-15,-21,46,-1,-22,50,127,75,26,-11,-28,5,16,-32,-83,67,5,-36,50,-25,-29,42,18,-76,54,-29,36,83,36,15,51,-59,-56,-23,44,-63,8,71,-87,44,24,-2,30,-16,-54,-16,-13,-9,0,16,-28,-49,-25, 
  /* [10][0][][] */ 31,55,13,-68,-62,-28,65,7,-65,-83,50,-39,11,-33,-2,-25,-77,-1,-4,84,33,42,-28,-19,11,104,17,26,-32,-37,-26,-26,62,-21,45,11,-21,-49,32,112,37,-26,33,41,-63,-83,15,38,35,81,-56,-43,-28,-28,-2,39,-3,-102,83,-24,2,89,-98,-43,-15,-63,-37,40,4,-40,11,5,127,45,17,-77,61,-45,36,19,17,-15,2,-3,-36,13,4,76,-73,-34,-50,23,23,27,-33,90, 
  /* [11][0][][] */ -49,3,78,37,-17,60,16,-52,39,-23,63,21,11,58,26,61,-45,-40,41,0,-55,50,-30,-43,-43,-20,-20,1,50,-45,86,0,45,-3,-24,-77,-93,24,-4,-24,-71,70,-37,68,99,-12,-28,45,1,25,-106,-68,25,13,98,-39,-39,-55,-15,-67,4,-71,4,-46,38,-113,73,25,107,19,70,42,-107,-4,63,-91,127,69,-12,25,8,19,-24,64,50,54,-17,28,-21,-28,-24,41,3,60,36,64, 
  /* [12][0][][] */ 50,-15,-26,-61,23,53,-1,29,44,60,11,13,-5,16,-10,12,-70,78,34,12,106,6,49,-29,-24,14,-42,-70,-37,57,15,-4,3,-2,28,-18,21,-45,-14,-64,7,-24,26,64,-81,19,-44,-38,-41,39,-3,25,5,-44,49,-72,-4,43,11,-5,-27,-66,15,-95,8,95,-23,-47,-73,-31,75,29,40,-11,-23,35,-39,24,-81,-7,-15,0,110,14,31,9,-14,-127,57,16,-49,27,101,-19,-36,-67, 
  /* [13][0][][] */ 14,18,-51,14,-28,-50,7,-6,-7,-9,-52,-61,-22,-81,-37,-48,-2,-17,-57,-19,-59,-10,44,41,-77,32,89,24,5,-33,30,50,-37,6,-65,102,-12,-14,-32,-35,70,-15,-11,9,-59,-43,72,-81,74,49,2,34,19,29,-14,22,46,-49,0,-25,1,37,2,-72,-64,61,-85,17,-56,-6,-15,-5,0,1,-43,-37,-127,16,18,80,-26,-7,27,-20,42,19,53,-17,-53,10,29,18,0,-23,-60,-16, 
  /* [14][0][][] */ 4,7,-49,-21,66,70,-110,-15,39,-60,35,11,73,36,-2,-51,-59,-10,76,105,16,-5,-2,21,-23,-7,-7,96,22,-81,-26,44,60,0,-63,-88,-15,60,94,20,51,13,29,25,51,-60,87,-13,-20,-2,11,-33,69,62,-38,14,-48,63,-82,-10,59,-28,-46,-59,13,-52,-42,16,-20,54,-15,60,-78,-45,-40,-51,44,6,-7,-18,-13,-16,-47,19,-39,55,8,-3,-26,90,127,54,-3,-39,-30,1, 
  /* [15][0][][] */ -59,26,24,-36,-9,0,-14,-56,-44,11,20,39,-10,-88,12,46,-97,-19,32,-24,48,-45,-18,-57,-13,30,17,-28,-42,-64,-6,3,-28,37,42,-13,-37,-18,12,-22,-13,-26,29,-27,-73,44,2,83,-36,-12,7,-31,-68,50,-19,-6,-70,-18,101,55,-37,38,-56,14,-62,-35,-49,44,0,-73,64,-31,102,11,-9,-45,54,-39,41,15,-8,24,18,0,13,-52,-127,20,-12,-17,-107,0,32,-15,-21,63, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0021670721471309662, 0.004024021327495575, 0.0058019701391458511, 0.0062436698935925961, 0.0038734108675271273, 0.0029749653767794371, 0.0032376057934015989, 0.0038630538620054722, 0.0043237586505711079, 0.0051958528347313404, 0.0035873579327017069, 0.0034161931835114956, 0.0042458460666239262, 0.0045674466527998447, 0.0032972346525639296, 0.0045067244209349155, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -6742, -2199, -1114, -319, -7360, -9241, 1420, -9803, -1248, 450, 7869, -2330, -5431, 17819, 16492, -2171, 15200, 12375, -2303, -5804, -820, 2594, -6, 1314, -79, -4604, -4705, -9372, -3287, -6273, 628, 458, 18096, -1025, -3136, 200, -191, -2120, -1086, 12783, -1057, 223, -4117, -4297, 6281, 10707, -6261, 16265, 2549, 1507, 8234, -1576, -3565, 612, -4171, 12602, -566, -2038, 18861, 13180, 8687, 14842, -1109, -4978, -4614, 2750, -844, 8020, -5376, -8604, 1155, -919, 13260, 3470, -1418, 9214, -150, 2822, 10411, 5208, 3799, 12768, -1765, 1317, 1718, 1993, -10503, -2453, -14493, -5688, 11745, 9, 3900, -140, -1401, -2826, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00021869437478017062, 0.00016872982087079436, 0.00013374327681958675, 0.00098758470267057419, 0.00018193616415373981, 0.00022252005874179304, 0.00030029314802959561, 0.00010065222159028053, 0.00038133622729219496, 0.00029054100741632283, 0.00011192163947271183, 0.00016841934120748192, 0.00018384194117970765, 0.00010071384895127267, 9.2009620857425034e-05, 0.00015985153731890023, 0.00017481710528954864, 0.00011976069799857214, 0.00020034995395690203, 0.00015441371942870319, 0.0001582945988047868, 0.00036642371560446918, 0.00019084115047007799, 0.00014989946794230491, 0.00036927286419086158, 0.00012952354154549539, 0.00027037071413360536, 8.1052865425590426e-05, 0.00010142316750716418, 0.00013923052756581455, 0.0004897952894680202, 0.00016362288442905992, 0.00010333576210541651, 0.0001929367717821151, 0.00030703347874805331, 0.00024809001479297876, 0.00010395696881460026, 0.00020036415662616491, 0.00028560607461258769, 9.3265633040573448e-05, 0.00018328518490307033, 0.00016322903684340417, 0.00012357195373624563, 0.00015496838022954762, 0.00019614171469584107, 0.00016418342420365661, 0.00012112646800233051, 0.00018327278667129576, 0.00016894667351152748, 0.00012036692351102829, 0.00010008342360379174, 0.00019718351541087031, 0.00013670483895111829, 0.00015317981888074428, 0.00013453212159220129, 0.00015807304589543492, 0.00020093109924346209, 0.00040132837602868676, 0.00012121238250983879, 8.6046376964077353e-05, 0.0001635830121813342, 0.00013745468459092081, 0.00014939978427719325, 0.00011491198529256508, 0.00014542258577421308, 0.00029480108059942722, 0.0007254451047629118, 0.00012002423318335786, 0.00011050804459955543, 0.00010112139716511592, 0.00025316569372080266, 0.00011222072498640046, 0.00012608745601028204, 0.00015652533329557627, 0.00020965254225302488, 0.00016796981799416244, 0.00080263061681762338, 0.00010844566713785753, 0.00015559259918518364, 0.00016632719780318439, 0.00013855643919669092, 0.00010348798241466284, 0.00025815729168243706, 0.00018273542809765786, 8.0414327385369688e-05, 0.00013201695401221514, 0.00013073901936877519, 0.00031969128758646548, 0.00030516061815433204, 0.00014740201004315168, 0.00015600767801515758, 0.00018375267973169684, 0.00018942369206342846, 0.00022213299234863371, 0.00035874484456144273, 0.00042614687117747962, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 72,113,-15,94,-6,41,49,127,127,-60,-109,54,-21,-33,59,-75,-44,-31,13,43,48,34,76,117,38,6,-10,61,54,25,-3,14,-127,39,-8,82,-66,57,-15,-66,37,-33,66,38,-46,-43,55,-90,-14,-52,-96,-60,86,46,14,-27,-71,-25,-71,-112,-127,-11,-45,-40,-54,35,111,-62,-29,39,50,86,-51,-32,64,23,117,-127,-22,46,-47,-98,43,-6,127,-56,53,82,8,26,11,51,36,-81,74,3, 4,-4,-30,114,8,127,-26,52,101,14,-127,127,17,-82,-82,9,-127,51,88,127,127,41,90,38,3,127,13,47,-57,94,-49,-91,53,31,42,-117,55,108,-43,11,127,-91,113,101,-9,-127,127,-127,-92,-127,-108,-10,127,127,-9,-127,-9,22,-127,-127,-54,-84,-27,4,-55,80,127,-48,33,127,127,-25,-28,-43,-8,-53,127,-85,-17,127,-57,19,127,-70,123,-127,127,127,127,127,-89,-104,127,-14,127,-8, 11,-127,-8,67,-1,25,30,91,64,40,-28,21,-14,-28,42,-72,-4,-97,19,38,26,40,127,127,16,-12,17,98,-36,5,1,-55,-82,-100,-29,66,-12,63,-12,-83,24,54,84,52,-78,-10,37,-39,20,16,-41,-42,45,2,-47,-31,55,-5,-68,-121,-111,-34,-53,-48,112,20,75,-57,-69,26,-1,-70,-28,-111,-24,11,57,-77,-58,47,-34,-127,31,-6,71,-46,46,73,18,21,23,35,20,47,-44,22, 
  /* [0][1][][] */ 95,51,14,120,17,12,105,98,61,-127,-120,63,-7,-66,-53,74,-52,-127,16,7,-94,-7,-54,-107,-21,52,-115,127,-127,72,76,75,-43,99,5,127,-127,94,-53,-61,20,-127,34,44,-10,-50,30,-50,-127,-96,-124,24,72,-71,112,-83,-126,12,-60,-68,-62,-127,-10,37,-113,-24,106,-100,-72,73,-47,-44,-127,2,127,-127,71,55,-90,-50,127,-121,-12,99,55,-18,61,84,29,-2,-127,45,-49,-101,68,-12, -127,-13,-20,113,-56,-58,-127,-87,2,32,-114,73,-26,-127,-127,127,-18,-113,127,68,14,-127,-75,42,-96,125,51,28,-86,43,-127,-22,-113,1,127,-81,-36,79,127,-107,-58,-63,18,127,44,-20,-45,-47,-31,-101,-80,127,72,17,26,-3,33,97,74,-118,-29,1,2,127,-2,-127,97,127,49,96,-111,-31,-31,96,-113,-51,64,124,43,-108,-90,84,-84,22,-54,-103,59,45,83,24,-99,-127,-116,-61,63,127, 84,-31,56,91,19,39,-39,89,17,80,-57,17,-3,-83,-117,49,-47,-116,-1,6,-103,-4,-44,-104,-20,26,127,57,115,90,25,-127,-32,-127,-32,106,-93,92,-61,-101,1,83,61,51,-66,-62,9,-53,55,-61,-127,-35,68,-84,-127,-84,127,4,-90,-26,-48,-97,-10,25,127,-19,69,-85,-127,86,-20,-61,-86,-127,-36,-87,21,2,-127,-85,-86,-80,-27,127,13,-20,60,77,-44,-32,-73,85,-30,127,4,-26, 
  /* [0][2][][] */ 30,-68,63,77,41,-10,21,64,-62,-69,17,-89,68,-83,-72,18,-10,-27,-32,63,-34,-4,-81,-72,39,-40,-15,41,117,34,31,36,-68,-53,-22,23,106,57,51,-62,-2,50,-35,16,-127,-54,-45,10,-5,109,109,43,67,-25,74,-44,34,-1,-71,109,-72,-24,69,17,20,33,79,30,68,42,-2,112,-101,22,22,-34,91,-24,-68,-64,-28,-43,-6,8,-125,109,10,79,13,24,-85,43,-28,1,69,12, -12,2,127,127,127,114,-40,56,-69,27,-103,-83,127,-80,-103,58,-82,39,5,-24,32,-42,-1,-21,127,-113,-10,76,-113,127,5,70,-52,106,34,-24,25,127,-5,-127,-9,36,-127,115,-16,-12,-70,-70,-2,126,21,84,64,-33,98,-98,-39,127,-87,42,15,-44,127,113,16,-54,111,41,127,-22,12,89,-66,57,-19,-32,17,-85,-31,-124,-52,40,-36,-91,-69,118,22,117,80,20,-92,82,-24,8,61,5, 31,83,71,33,38,-43,-15,13,-23,25,65,-45,44,-64,-56,36,-43,11,-12,42,-9,24,-68,-124,36,-20,47,68,-19,60,1,-56,-69,-27,-13,24,102,105,52,-58,-14,80,10,80,-88,-47,-43,-14,37,73,32,56,23,32,-105,-39,-62,-2,-43,99,-102,-76,45,23,78,5,47,-2,72,51,-1,127,-46,-13,-51,-3,47,2,-64,-8,-19,-107,-39,15,-97,77,9,71,-12,30,-67,52,-34,-6,54,23, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0092945108190178871, 0.0071710171177983284, 0.0056840889155864716, 0.041972346603870392, 0.0077322870492935181, 0.009457102045416832, 0.012762458994984627, 0.004277719184756279, 0.016206789761781693, 0.0123479925096035, 0.0047566695138812065, 0.0071578221395611763, 0.007813282310962677, 0.004280338529497385, 0.0039104088209569454, 0.0067936903797090054, 0.0074297268874943256, 0.0050898296758532524, 0.0085148727521300316, 0.0065625831484794617, 0.0067275203764438629, 0.015573007985949516, 0.0081107486039400101, 0.0063707274384796619, 0.015694096684455872, 0.0055047506466507912, 0.011490754783153534, 0.0034447466023266315, 0.0043104845099151134, 0.0059172972105443478, 0.020816300064325333, 0.0069539723917841911, 0.0043917698785662651, 0.0081998128443956375, 0.013048922643065453, 0.010543826036155224, 0.0044181710109114647, 0.0085154762491583824, 0.01213825773447752, 0.0039637894369661808, 0.0077896201983094215, 0.0069372337311506271, 0.005251807626336813, 0.006586155854165554, 0.0083360224962234497, 0.0069777951575815678, 0.0051478748209774494, 0.0077890935353934765, 0.0071802334859967232, 0.0051155942492187023, 0.0042535453103482723, 0.0083802994340658188, 0.0058099557645618916, 0.0065101422369480133, 0.0057176151312887669, 0.0067181042395532131, 0.0085395714268088341, 0.017056455835700035, 0.0051515260711312294, 0.0036569708026945591, 0.0069522778503596783, 0.005841823760420084, 0.0063494909554719925, 0.0048837591893970966, 0.0061804596334695816, 0.012529045343399048, 0.030831415206193924, 0.0051010297611355782, 0.0046965917572379112, 0.0042976592667400837, 0.010759541764855385, 0.0047693806700408459, 0.0053587164729833603, 0.0066523267887532711, 0.0089102331548929214, 0.0071387169882655144, 0.034111801534891129, 0.0046089407987892628, 0.0066126850433647633, 0.0070689059793949127, 0.005888648796826601, 0.0043982393108308315, 0.010971684940159321, 0.0077662556432187557, 0.0034176087938249111, 0.0056107207201421261, 0.0055564083158969879, 0.013586879707872868, 0.012969326227903366, 0.0062645855359733105, 0.0066303261555731297, 0.0078094885684549809, 0.0080505069345235825, 0.0094406520947813988, 0.01524665579199791, 0.018111241981387138, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 4953, 1534, -802, -8315, 3696, 8184, 7546, 799, -3043, 7157, -781, -2941, 2369, 344, 89, -438, 7527, 4074, -667, 1550, 3493, 11060, 8600, -1228, -3860, -272, 9411, -434, 412, -502, 8908, -535, 4831, 2461, 2504, -3901, 959, -5372, 2638, 3317, 987, 1282, 3594, -2001, -1790, 1595, 711, 5826, 2351, 2237, 2749, -475, -2514, 231, 186, 915, 1584, -2029, 7861, 2201, -1952, 3924, 1033, 4725, 4496, 5868, -8829, 1018, 3955, -193, 6070, 576, 1104, 3624, 1918, -197, -6909, 789, 2314, 8338, 613, 2063, 13509, -340, 927, 5166, -550, -3834, 16479, -8, -513, -785, 8775, 1889, -3567, -1185, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00015955207345541567, 0.00024523513275198638, 0.00030003458959981799, 9.5389528723899275e-05, 0.00016483907529618591, 0.0001036164176184684, 0.00012041640002280474, 0.00022577216441277415, 0.00015226795221678913, 0.0001289937790716067, 0.00026068059378303587, 0.00017231250240001827, 0.0002432119072182104, 0.00029235833790153265, 0.00025855290004983544, 0.00028408400248736143, 0.00010450445552123711, 0.00015076444833539426, 0.00021102846949361265, 0.00013398648297879845, 0.0001736053527565673, 9.1374276962596923e-05, 0.00010831812687683851, 0.00016615635831840336, 0.00016017220332287252, 0.00028664674027822912, 9.8787633760366589e-05, 0.00016178077203221619, 0.00024224503431469202, 0.00025075807934626937, 9.3502058007288724e-05, 0.00028726874734275043, 0.0001477958430768922, 0.00020698031585197896, 0.00018213130533695221, 0.00013446848606690764, 0.0002652675611898303, 0.00014208714128471911, 0.00011162705050082877, 0.00016717903781682253, 0.00028884038329124451, 0.00021447725885082036, 0.00015504640759900212, 0.00017072998161893338, 0.00022079610789660364, 0.00020827380649279803, 0.00037159441853873432, 0.00014406700211111456, 0.0002541793801356107, 0.0002377549244556576, 0.00015756797802168876, 0.00031990039860829711, 0.00016455109289381653, 0.00021619188191834837, 0.00018976040882989764, 0.000213350445847027, 0.0001762319152476266, 0.00017394439782947302, 0.00011496381921460852, 0.00017051631584763527, 0.00020754737488459796, 0.00018608021491672844, 0.00023696293646935374, 0.0001259551354451105, 0.00013560087245423347, 0.0001350965176243335, 0.00011022653779946268, 0.00024048623163253069, 0.00014983215078245848, 0.00023339134349953383, 0.0001382312475470826, 0.00026271780370734632, 0.00021277905034366995, 0.00013992674939800054, 0.00021111055684741586, 0.00030283338855952024, 8.251991675933823e-05, 0.00025920881307683885, 0.00018357101362198591, 9.9186450825072825e-05, 0.00023811054416000843, 0.00024935748660936952, 6.9848596467636526e-05, 0.00017712322005536407, 0.00021820423717144877, 0.00014322303468361497, 0.00021659574122168124, 0.00014068619930185378, 6.1781494878232479e-05, 0.00025226996513083577, 0.00032890649163164198, 0.000238823689869605, 9.2504255007952452e-05, 0.00018628090037964284, 0.00012316882202867419, 0.00019652649643830955, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -70,82,28,-39,-15,-55,4,21,83,-32,18,-44,102,-20,8,-127, 
  /* [1][0][][] */ -30,36,-127,-66,-3,26,-3,-26,-18,-18,75,24,54,59,-23,57, 
  /* [2][0][][] */ 8,-60,-65,-7,3,-49,25,-41,-16,20,48,53,13,10,-16,127, 
  /* [3][0][][] */ -15,-60,20,-60,-82,-47,2,-127,34,71,26,-75,-52,-7,-105,-42, 
  /* [4][0][][] */ -18,-30,56,114,-51,-27,-93,-19,86,50,-15,32,-7,47,-127,-74, 
  /* [5][0][][] */ -127,8,-55,19,109,-11,9,-59,-3,-11,14,-122,101,-68,-45,-74, 
  /* [6][0][][] */ -14,-9,28,-41,-94,70,2,-14,-7,-56,107,17,-30,-41,-127,-3, 
  /* [7][0][][] */ -37,127,80,-103,3,98,-60,5,-31,29,-40,-1,31,19,20,34, 
  /* [8][0][][] */ -49,-12,-66,5,58,-10,67,127,-85,-26,49,6,29,53,-26,18, 
  /* [9][0][][] */ 31,31,66,0,-47,-22,1,-3,12,95,127,49,19,-21,34,-35, 
  /* [10][0][][] */ -36,-127,9,-53,-55,42,-5,-3,-24,-22,-22,15,10,24,-67,60, 
  /* [11][0][][] */ 75,-87,-10,88,-127,-24,104,-26,0,126,30,-18,8,-56,25,84, 
  /* [12][0][][] */ -4,-47,100,28,54,31,9,28,86,40,127,53,-22,28,-83,0, 
  /* [13][0][][] */ 3,42,7,14,21,-4,67,76,-127,62,0,-21,10,27,69,-113, 
  /* [14][0][][] */ 107,-74,9,47,3,-45,57,59,44,127,71,51,10,-55,65,16, 
  /* [15][0][][] */ -1,127,41,-9,34,70,-36,43,-25,-26,-2,-53,-25,60,-4,17, 
  /* [16][0][][] */ -16,78,127,-43,48,124,39,6,26,100,4,-21,75,-17,117,126, 
  /* [17][0][][] */ 9,65,-2,-98,7,-127,-24,-121,-60,35,-18,94,-115,-31,96,44, 
  /* [18][0][][] */ -79,21,-25,-67,76,18,-6,22,-5,77,115,43,-29,127,-6,-39, 
  /* [19][0][][] */ 62,116,66,73,8,-51,9,40,39,127,47,94,-12,63,-43,31, 
  /* [20][0][][] */ 108,-11,-20,127,-116,-56,-20,2,-6,-39,-75,-13,52,-60,-27,36, 
  /* [21][0][][] */ -127,-27,-13,-1,13,40,-89,32,11,-1,33,16,4,22,-57,-17, 
  /* [22][0][][] */ -8,-53,-67,-14,126,-15,1,-37,127,37,-5,-60,46,-16,-4,97, 
  /* [23][0][][] */ -45,101,-1,11,70,63,82,118,-31,127,-68,-43,-27,37,-44,-110, 
  /* [24][0][][] */ -3,-91,-9,23,104,-5,106,-21,116,127,75,11,-24,75,-3,47, 
  /* [25][0][][] */ 127,-49,39,17,8,76,-16,43,-39,-18,-14,-12,82,-19,74,13, 
  /* [26][0][][] */ 87,14,78,52,46,-35,-28,2,-26,10,67,59,77,-127,38,-79, 
  /* [27][0][][] */ -2,-68,-30,-75,100,119,3,-125,43,-102,20,-6,76,-41,127,20, 
  /* [28][0][][] */ 10,-34,-104,-101,24,-62,-20,-46,-127,108,-45,97,-48,43,77,54, 
  /* [29][0][][] */ 95,127,-7,64,65,66,-58,-27,41,-7,-4,26,-60,29,11,22, 
  /* [30][0][][] */ -108,127,12,17,86,-34,58,49,-66,83,13,30,-6,96,-53,59, 
  /* [31][0][][] */ 21,-52,127,65,-7,-84,-32,-25,-42,46,26,-53,-42,107,-23,59, 
  /* [32][0][][] */ -20,42,52,-69,-127,2,57,69,8,-48,50,-98,-8,-3,-17,110, 
  /* [33][0][][] */ 4,10,63,95,-25,-39,-61,-26,-28,-45,-15,-38,-56,2,43,127, 
  /* [34][0][][] */ 19,70,-41,-119,127,-36,-71,84,-14,15,-34,-16,-70,-56,-53,93, 
  /* [35][0][][] */ 73,-35,34,-34,-103,99,-56,-76,-97,-127,-51,-51,24,-21,-29,24, 
  /* [36][0][][] */ 18,50,-90,-34,4,127,13,-13,-48,-2,32,-27,-9,42,-33,47, 
  /* [37][0][][] */ 41,16,37,-17,16,-95,93,-48,-127,84,14,-27,16,72,72,8, 
  /* [38][0][][] */ -31,60,55,-23,-93,-37,127,-124,-16,86,-52,16,-69,-27,-89,41, 
  /* [39][0][][] */ 58,19,-87,-76,-7,-45,73,-57,-39,27,71,-28,88,5,-127,-52, 
  /* [40][0][][] */ -44,4,-43,-62,-69,-38,-17,-94,58,32,22,-11,127,7,-14,94, 
  /* [41][0][][] */ -5,-59,5,57,-34,-19,-91,-6,47,-27,127,-101,-72,-5,11,37, 
  /* [42][0][][] */ -68,112,-125,-48,-49,-45,18,-73,64,68,-20,79,127,-54,-36,80, 
  /* [43][0][][] */ 3,73,13,-14,126,1,77,75,-56,49,43,-127,-66,-15,-55,-48, 
  /* [44][0][][] */ 0,-25,5,-50,-40,-10,44,45,-92,43,47,-27,127,30,-32,-30, 
  /* [45][0][][] */ -38,-36,-76,55,-21,-14,2,127,80,-4,2,-28,-53,57,-37,-61, 
  /* [46][0][][] */ 22,-35,87,127,0,2,12,23,8,16,44,-51,24,76,50,82, 
  /* [47][0][][] */ -51,-71,-58,42,-6,-28,45,-15,-23,-71,-127,10,63,-21,46,50, 
  /* [48][0][][] */ -40,31,-36,-80,-35,18,30,-14,-39,-17,86,42,36,-127,32,-23, 
  /* [49][0][][] */ -94,30,69,23,6,31,63,127,-16,21,40,-17,-25,84,-26,13, 
  /* [50][0][][] */ -27,49,-12,22,25,-127,-56,3,-36,75,-41,22,-7,-91,-89,-22, 
  /* [51][0][][] */ -34,36,31,127,-2,9,-51,-15,-1,19,-34,22,34,27,-16,34, 
  /* [52][0][][] */ -122,-17,28,-67,36,17,36,-24,65,-60,-55,-88,-127,-104,-107,100, 
  /* [53][0][][] */ 8,-98,-91,-82,-86,-64,2,127,34,-65,-92,-5,-17,-31,62,73, 
  /* [54][0][][] */ -29,-127,-81,-93,-109,63,71,39,-35,-74,41,91,-13,-71,-82,60, 
  /* [55][0][][] */ 7,-60,-91,37,5,13,93,84,-127,-106,-62,0,40,-86,-89,40, 
  /* [56][0][][] */ 120,46,-44,-79,-127,60,-126,-61,-35,-56,44,46,57,-64,24,57, 
  /* [57][0][][] */ -27,3,-29,-29,118,81,3,-58,-2,127,-84,28,-11,87,-4,-2, 
  /* [58][0][][] */ 32,-40,-41,-31,37,-10,-45,-34,74,-127,-45,17,-72,-32,-18,35, 
  /* [59][0][][] */ -20,-66,-48,66,80,-24,-65,-85,55,62,-127,-55,-21,95,-6,49, 
  /* [60][0][][] */ 50,-65,-75,29,-116,-61,31,-62,3,127,-60,-7,0,-32,36,-30, 
  /* [61][0][][] */ -31,-22,-52,33,-26,49,-127,-63,-41,-43,22,68,74,-9,70,59, 
  /* [62][0][][] */ 5,-26,54,-32,-36,-10,40,62,-46,127,-36,65,100,-82,40,104, 
  /* [63][0][][] */ 20,-92,4,-68,-60,3,40,-64,-64,-84,-67,72,-21,127,124,5, 
  /* [64][0][][] */ -47,-72,-109,-57,-21,-3,28,-49,36,-83,26,7,60,-67,-116,127, 
  /* [65][0][][] */ -53,0,13,56,32,11,65,7,26,14,-102,-52,127,34,-25,41, 
  /* [66][0][][] */ -36,-24,13,0,-33,-116,107,39,-11,-55,7,1,-29,-53,-127,17, 
  /* [67][0][][] */ -19,-70,-84,7,-37,98,-70,-81,-19,-42,-39,-127,13,-30,-4,44, 
  /* [68][0][][] */ 106,41,-39,5,-66,61,-53,-123,-36,-99,-89,-26,127,14,52,-73, 
  /* [69][0][][] */ 18,31,36,3,22,-5,-32,23,-73,127,-34,-13,33,53,59,-103, 
  /* [70][0][][] */ -31,-30,-85,13,-67,0,34,-38,41,115,56,55,127,-64,-49,5, 
  /* [71][0][][] */ 88,-69,39,48,-77,-30,24,20,127,-35,5,-8,58,-109,4,-33, 
  /* [72][0][][] */ 13,-51,45,76,45,9,-119,33,127,-38,29,9,-61,-73,-118,97, 
  /* [73][0][][] */ 34,-34,-52,-83,127,-57,-60,55,-29,120,-36,56,41,-72,32,-65, 
  /* [74][0][][] */ 14,-12,75,-1,-127,-17,46,-7,-102,-82,15,29,25,-76,-29,23, 
  /* [75][0][][] */ -20,9,-65,22,-1,25,-45,-4,25,-23,33,41,-76,39,-15,127, 
  /* [76][0][][] */ -18,-44,-33,32,10,-31,74,-80,-127,52,79,31,-7,-96,-45,82, 
  /* [77][0][][] */ -57,36,-61,12,-32,-51,36,127,94,-18,35,14,-42,-24,72,83, 
  /* [78][0][][] */ 84,54,1,37,4,-60,-127,-51,38,-24,-83,35,-45,-51,35,62, 
  /* [79][0][][] */ -57,-27,127,63,-107,-93,31,-13,-43,41,32,-88,22,71,-74,82, 
  /* [80][0][][] */ 127,2,-3,-78,-125,35,55,-32,51,13,-43,39,82,-53,62,34, 
  /* [81][0][][] */ 53,-23,-36,-39,34,18,-18,84,20,38,-5,27,8,10,-6,-127, 
  /* [82][0][][] */ 83,61,112,-47,83,-119,30,6,-62,95,-127,-32,14,-11,-2,-4, 
  /* [83][0][][] */ -18,66,48,7,119,81,119,112,8,-4,-44,-56,-44,60,-75,-127, 
  /* [84][0][][] */ 11,-36,7,65,-2,-97,-117,-8,-54,-4,-93,19,-127,17,8,6, 
  /* [85][0][][] */ -114,46,-59,-3,-10,-23,-127,-84,-5,25,-53,-39,-104,-110,-84,-13, 
  /* [86][0][][] */ -44,22,127,106,40,-91,70,47,27,23,-61,-78,22,110,-12,-43, 
  /* [87][0][][] */ -53,27,116,-41,-63,-127,62,66,5,20,53,33,-11,19,-40,40, 
  /* [88][0][][] */ -30,-54,-75,18,15,11,-9,-2,-49,-32,-125,20,127,29,117,64, 
  /* [89][0][][] */ 37,-12,26,-104,-28,-64,-10,63,127,-29,16,-100,24,-67,-18,-98, 
  /* [90][0][][] */ -12,60,-10,28,-64,-3,33,89,-15,-31,12,127,-1,52,-50,42, 
  /* [91][0][][] */ -81,22,-18,58,89,58,6,-127,15,-17,-24,17,-49,-26,-53,-43, 
  /* [92][0][][] */ -14,122,27,-7,-127,-5,-78,37,20,110,97,88,-34,-1,81,-33, 
  /* [93][0][][] */ 78,20,127,14,-103,-67,2,12,-51,-87,-20,-16,9,-87,17,63, 
  /* [94][0][][] */ -49,-127,5,-72,24,-2,-62,7,-2,-53,-16,88,31,49,20,66, 
  /* [95][0][][] */ -27,-52,11,-95,96,127,-42,-12,53,-9,-99,19,-46,47,23,-16, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0021242694929242134, 0.0032650502398610115, 0.0039946478791534901, 0.0012700121151283383, 0.0021946604829281569, 0.0013795446138828993, 0.001603218843229115, 0.0030059211421757936, 0.0020272890105843544, 0.0017174177337437868, 0.0034706902224570513, 0.002294161356985569, 0.0032381131313741207, 0.0038924464024603367, 0.0034423624165356159, 0.0037822825834155083, 0.0013913678703829646, 0.002007271395996213, 0.0028096241876482964, 0.0017838903004303575, 0.0023113742936402559, 0.0012165532680228353, 0.0014421429950743914, 0.0022121986839920282, 0.0021325259003788233, 0.0038164025172591209, 0.0013152543688192964, 0.0021539423614740372, 0.0032252401579171419, 0.003338582580909133, 0.0012448824709281325, 0.0038246840704232454, 0.0019677476957440376, 0.0027557271532714367, 0.0024248885456472635, 0.0017903076950460672, 0.003531761234626174, 0.0018917422275990248, 0.0014861978124827147, 0.0022258146200329065, 0.0038456087931990623, 0.0028555411845445633, 0.0020642813760787249, 0.0022730918135493994, 0.0029396701138466597, 0.0027729487046599388, 0.0049473922699689865, 0.001918101916089654, 0.003384133568033576, 0.0031654590275138617, 0.00209785345941782, 0.0042591402307152748, 0.0021908262278884649, 0.0028783695306628942, 0.0025264620780944824, 0.0028405387420207262, 0.0023463442921638489, 0.0023158884141594172, 0.0015306234126910567, 0.0022702470887452364, 0.0027632769197225571, 0.0024774640332907438, 0.0031549145933240652, 0.0016769614303484559, 0.0018053842941299081, 0.0017986693419516087, 0.0014675514539703727, 0.0032018234487622976, 0.0019948589615523815, 0.0031073624268174171, 0.0018404049333184958, 0.0034978138282895088, 0.0028329312335699797, 0.001862978795543313, 0.0028107170946896076, 0.00403191102668643, 0.0010986666893586516, 0.0034510951954871416, 0.0024440567940473557, 0.0013205641880631447, 0.0031701936386525631, 0.0033199351746588945, 0.00092996121384203434, 0.0023582109715789557, 0.002905162051320076, 0.0019068655092269182, 0.0028837465215474367, 0.0018730900483205914, 0.00082255620509386063, 0.0033587114885449409, 0.0043790470808744431, 0.0031796884723007679, 0.0012315977364778519, 0.0024801359977573156, 0.001639864407479763, 0.0026165454182773829, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -24109, 11626, 14021, 821, 8373, -21367, 16710, 4117, 13150, -8741, 18258, -1076, 967, -13944, -2252, 9300, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 7.7831864473409951e-05, 7.7275843068491668e-05, 5.3499294153880328e-05, 4.5066852180752903e-05, 9.4924704171717167e-05, 0.0001190399780170992, 5.1645991334225982e-05, 5.4940668633207679e-05, 0.00013827983639203012, 9.6564734121784568e-05, 8.2095364632550627e-05, 7.1056871092878282e-05, 6.3467676227446645e-05, 8.0045196227729321e-05, 9.7494114015717059e-05, 7.0287329435814172e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -13,-2,-36,-10,-49,-74,5,-15,-7,-52,28,-6,40,-38,54,31,-85,-24,75,2,39,-28,-127,-20,18,92,101,69,8,47,61,-38,-19,19,17,7,13,81,-24,-18,87,18,11,3,14,-2,-8,-18,36,-49,65,-42,-34,40,33,59,-12,-62,55,67,-8,4,-39,-43,8,3,41,8,13,-23,48,-36,17,7,14,23,89,17,32,7,-6,42,9,55,-23,9,-6,9,19,11,-112,14,55,-5,87,68, 
  /* [1][0][][] */ -14,23,-41,3,45,-47,101,-69,-89,-76,-106,-14,-2,-22,-51,-47,19,-10,-14,-14,3,-100,105,-77,12,26,16,43,-55,35,-22,16,-13,22,23,33,-27,12,-81,86,-41,-7,31,-127,34,-8,-19,13,-76,-8,22,-21,-84,97,94,-38,50,26,-78,-20,-58,-6,8,-56,-23,51,79,-5,-29,-96,-5,-3,12,33,5,5,-63,12,73,-25,53,-47,50,-80,-26,-15,-10,13,-43,-2,11,14,82,-60,-20,92, 
  /* [2][0][][] */ 25,-19,-40,3,27,37,-57,66,-73,90,-7,-26,25,9,104,9,41,-19,-111,-37,-16,-64,-1,-45,-35,36,-30,16,27,-51,21,53,-36,-11,-9,127,6,65,-8,-83,118,-27,-51,25,23,15,29,-35,-37,29,47,-63,-13,42,100,-70,-6,-29,76,-7,-43,-68,12,28,14,32,-44,-60,-56,30,50,-16,33,35,35,51,-67,20,-86,-94,61,42,62,-39,-40,-122,-36,12,-83,-33,1,58,88,-71,105,-40, 
  /* [3][0][][] */ 13,-84,0,-83,-75,-33,37,-76,20,72,-96,29,25,-38,87,9,8,10,-112,0,-99,-57,-5,-17,1,127,22,-65,-80,-33,-52,33,-13,-37,26,-37,30,8,29,50,-15,54,-81,50,33,-80,36,3,91,-9,49,-95,123,25,-52,-20,-26,-53,-8,-8,-3,3,91,24,3,14,89,-64,-44,72,-57,-38,1,-90,-18,-27,-1,-18,54,-2,-16,-27,-5,-42,-61,-54,53,70,-38,21,-4,19,51,-91,-27,88, 
  /* [4][0][][] */ -40,86,8,-34,3,29,-58,-34,-32,-87,7,0,12,-9,1,69,-55,-60,-24,-91,-11,-8,-59,79,17,-47,-46,-8,-24,113,-70,-40,52,-49,70,-25,35,39,-38,-19,13,48,-12,4,-47,17,33,-57,26,20,-57,25,-42,39,52,67,45,41,12,-15,7,31,-28,55,52,-14,-50,-23,10,-65,-17,-41,-3,22,60,58,-12,18,-54,122,36,74,69,-127,43,-67,-33,-49,-11,-36,-73,-25,-54,9,31,15, 
  /* [5][0][][] */ -33,-23,21,-28,2,-43,-2,-6,34,-9,-47,27,-23,-10,21,8,-39,-15,-36,-5,3,52,-1,20,11,-59,30,-14,4,52,43,80,-23,-74,46,8,-47,22,-41,2,-32,19,-10,16,12,43,-50,42,-16,18,37,18,41,-61,-22,6,-24,-16,5,-7,67,59,29,19,-3,8,81,2,23,-35,23,23,18,21,31,22,-4,-7,127,68,-23,9,21,69,40,58,16,77,11,-36,-21,10,-21,15,-21,37, 
  /* [6][0][][] */ 68,-33,43,30,-7,73,-25,-29,-35,-43,-67,44,28,22,1,31,29,35,-1,-19,-48,0,-49,-32,-17,-23,5,32,-106,14,-42,-1,8,47,-75,6,4,-53,35,-8,-45,-31,28,-36,18,46,-37,14,14,-23,-18,-127,14,-9,16,12,-11,-22,-15,-14,-50,-22,-6,-13,75,-57,-23,-32,-77,30,-5,-56,0,-45,10,-62,23,-51,-34,18,-23,23,-38,-85,29,-14,-22,24,-53,30,-25,45,19,-57,81,-48, 
  /* [7][0][][] */ -35,15,-52,72,28,-4,32,-27,-110,8,3,78,-40,-88,-14,-39,-6,-5,-12,7,-98,47,-32,-55,69,-6,-3,34,2,-1,-39,39,-23,-102,20,92,23,34,-28,26,-42,-49,27,-127,-30,44,96,93,-90,-19,2,-15,-5,5,7,-77,83,22,-92,-19,44,94,17,-36,60,-28,90,-32,-60,-22,84,42,-57,-14,-38,-25,-18,-65,50,-31,-17,3,-84,-31,37,46,-48,68,-17,-13,16,26,96,-27,43,33, 
  /* [8][0][][] */ 0,-39,-21,-19,-32,19,40,-51,-19,-31,43,47,3,19,-30,-15,56,-20,0,10,-3,-88,-45,-20,8,-35,55,17,28,45,49,-16,-12,-4,36,-19,-40,-15,-23,-48,-35,79,22,-24,-11,-12,15,-32,17,-19,37,50,15,-26,-11,12,15,117,-41,6,-3,-20,-33,1,-127,-16,-38,36,-10,17,47,7,-58,-110,41,-76,30,33,-48,-1,-21,-23,33,25,70,-74,-57,19,-53,73,-37,-30,-31,22,-11,-53, 
  /* [9][0][][] */ -54,-7,-22,70,-18,23,23,12,-49,-30,81,61,-30,58,1,-21,-32,52,-82,-38,44,-23,26,30,-67,-16,3,-1,-40,25,-16,23,-8,1,-26,78,-6,22,51,10,-29,-35,-7,-20,39,36,-2,15,0,37,-8,-6,66,-9,32,-22,10,22,24,24,-80,-20,58,-4,-13,42,72,-7,12,11,-16,-19,45,-127,-60,-123,-28,-72,77,-5,11,24,-9,-30,12,-61,-83,-3,-34,88,100,72,-5,43,27,53, 
  /* [10][0][][] */ 41,62,14,10,-10,22,-37,-60,55,34,-83,91,35,-2,-7,-59,-68,-22,15,-63,30,5,0,-60,-9,-24,-90,94,-71,54,-10,16,18,8,-17,11,-9,43,12,22,12,-50,86,-104,-54,23,20,14,6,-29,-11,-19,-59,-4,29,20,-30,56,-27,-71,-1,-92,-3,54,-26,-3,-90,-33,-78,-10,97,-26,-1,46,16,36,55,-49,-115,-23,1,33,43,7,-23,2,-56,-127,-37,32,13,73,72,-50,39,3, 
  /* [11][0][][] */ 39,-9,10,-16,-50,28,8,3,99,-51,-36,-41,2,20,-36,5,-23,14,15,-62,0,79,-22,22,27,0,46,12,53,-51,1,14,-13,127,-105,25,9,68,13,23,-43,39,15,-29,-36,39,-35,-28,52,-33,-34,-5,-29,28,-33,78,-5,-8,-32,-27,-13,23,-7,-74,-16,7,-67,-43,-27,-55,-50,11,47,-3,0,15,38,68,-45,-22,64,1,-54,14,12,-26,55,38,32,-27,-40,33,-17,54,63,25, 
  /* [12][0][][] */ -1,58,-14,50,78,-12,5,73,75,-79,-27,-4,-2,-13,-22,6,15,-4,-80,4,-4,30,8,21,-1,-37,-127,-12,46,-15,0,19,-57,-63,40,-5,49,-49,28,31,-42,-61,-8,-8,50,3,63,30,-58,-2,-45,63,66,-54,-8,-85,-45,10,-86,3,-26,58,80,-34,11,18,7,77,76,56,16,1,-4,-12,-22,-4,-75,-82,38,-60,-1,-43,17,-44,-26,-10,-33,-77,-5,33,3,55,13,59,21,7, 
  /* [13][0][][] */ 13,29,-82,14,-33,31,-49,-30,12,20,-25,40,-26,-27,82,-71,32,80,26,26,-48,-46,23,23,-42,-10,-19,26,-9,5,50,33,-26,56,-28,26,14,-30,-48,-52,-18,3,6,-14,33,-39,-18,60,-53,21,24,59,0,-56,44,51,5,-52,0,-51,60,124,58,1,12,120,113,8,-23,14,-64,13,41,12,-127,42,9,-126,80,-60,-20,-35,29,1,41,-45,-60,-16,-63,-21,-25,13,-42,8,62,66, 
  /* [14][0][][] */ -13,80,64,20,-52,-36,-15,38,-43,-120,100,-22,-45,23,92,-19,-32,4,-33,32,-14,30,-127,42,-81,-7,7,-114,6,-29,53,55,-53,9,18,8,-3,-40,-6,-10,25,11,35,-66,-28,22,-73,23,15,-77,61,-18,25,23,-18,21,-54,-4,42,48,-12,44,19,-2,-17,-1,-12,-30,46,58,53,63,-57,26,12,20,52,6,31,-9,4,85,10,-63,88,-30,-13,1,-76,5,-22,7,5,18,24,32, 
  /* [15][0][][] */ 69,-34,57,40,17,10,-49,13,36,16,-42,-8,79,34,90,-37,-37,13,-97,37,25,5,26,23,57,-32,63,-10,32,-47,-31,51,62,34,0,-108,50,61,89,43,54,12,1,-32,-36,-127,35,-35,-32,-34,3,-28,-19,-13,-34,57,-43,-12,-27,-25,-1,-97,-12,49,26,48,-73,65,-55,28,17,36,-13,-118,-43,-51,-34,-2,-104,44,77,-83,44,23,-63,-22,-11,-9,60,62,13,-88,-42,-27,40,-70, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0033078540582209826, 0.0032842233777046204, 0.0022737199906259775, 0.00191534124314785, 0.0040342998690903187, 0.0050591989420354366, 0.0021949545480310917, 0.0023349784314632416, 0.0058768927119672298, 0.0041040009818971157, 0.003489052876830101, 0.0030199170578271151, 0.0026973760686814785, 0.003401920897886157, 0.0041434997692704201, 0.002987211337313056, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 12615, -315, -290, 10087, -1559, -6560, 385, -1913, 5229, -5169, 1478, -16414, 9786, -3762, -3858, -3683, -1634, 33, -9850, -1429, 2425, -1978, -1617, -1391, -55, 4072, -16786, -3327, 39, -7501, -3219, -3226, 3385, 2859, -3388, -5439, 6203, 145, 4621, 14319, -2699, 10096, -609, 3006, -82, -6934, 9764, 187, 8258, -657, -7450, 989, -1433, -10159, 4319, 3714, -932, 6384, -7907, 7626, -3686, -1333, -439, 4266, 11543, -317, 23603, 10873, 15818, -5533, 13596, -2050, 3005, 3662, -3060, 19, 6102, 12860, 9634, 18369, 801, -856, 1272, 12560, -1794, -2042, 25499, -6290, 7787, -4655, -20713, -2984, -1096, -7361, 18235, -3369, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 8.4687140770256519e-05, 0.00020307990780565888, 0.00029267236823216081, 0.00016346792108379304, 0.00020409288117662072, 0.00029542678385041654, 0.00036992193781770766, 0.00014319435285869986, 0.0003437960403971374, 0.00023014600446913391, 0.0002169168001273647, 7.7467033406719565e-05, 8.1742058682721108e-05, 9.0581823315005749e-05, 0.0002726298407651484, 0.00020877986389677972, 0.00027752868481911719, 0.00042413023766130209, 0.00011384154640836641, 0.00030132537358440459, 0.00011788674601120874, 0.00025574825122021139, 0.00052289746236056089, 0.00027436076197773218, 0.0018266881816089153, 0.00022348792117554694, 0.00013522199878934771, 0.00020970984769519418, 0.00040090689435601234, 0.00017555788508616388, 0.00014994408411439508, 0.00023846591648180038, 8.1969228631351143e-05, 0.00024925501202233136, 0.0001608068123459816, 0.00020437786588445306, 0.00019018602324649692, 0.00027254223823547363, 0.00022715241357218474, 9.7966571047436446e-05, 0.00035104996641166508, 8.0607918789610267e-05, 0.0001842346100602299, 0.00028433918487280607, 0.00021173538698349148, 0.00022414485283661634, 0.00015847232134547085, 0.00047315179836004972, 9.3897113401908427e-05, 0.00025630625896155834, 0.00015055618132464588, 0.00022898968018125743, 0.00011610420915530995, 9.0115878265351057e-05, 0.00033893424551934004, 0.00024921508156694472, 0.00022885900398250669, 0.00029453606111928821, 0.00016556262562517077, 0.00014154992823023349, 0.00019790657097473741, 0.00015760824317112565, 0.00025111815193668008, 0.00012423678708728403, 0.00027675621095113456, 0.00021809471945744008, 6.9975401856936514e-05, 0.00011828665446955711, 0.00010394956916570663, 0.0002853709738701582, 0.00012486455671023577, 0.00018723620451055467, 0.00026364487712271512, 0.00019425495702307671, 9.7707088571041822e-05, 0.00016032868006732315, 0.00020694060367532074, 0.00021800714603159577, 0.0001225121523020789, 0.00017276602739002556, 9.6547235443722457e-05, 0.00016678229440003633, 0.0001647708413656801, 0.00038912543095648289, 0.00019279365369584411, 0.00023185729514807463, 5.9926878748228773e-05, 0.00016672424681019038, 0.0001815920986700803, 0.00019275855447631329, 4.5848810259485617e-05, 0.00025766229373402894, 0.00032116204965859652, 0.00012537113798316568, 0.00012156089360360056, 0.00028931882116012275, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -10,-15,-5,-127,54,10,5,-35,-9,-31,-26,98,8,-32,14,-42,-14,-1,-46,-4,-24,15,46,16,-37,-11,57,-1,18,0,67,-21,71,33,3,98,-29,-5,-22,-15,10,-66,7,-5,-5,107,-44,-41,-79,-21,38,17,-78,45,5,-28,30,-3,62,8,-8,-92,-9,-38,-35,-5,-63,-12,-82,51,2,22,22,55,11,6,-58,12,127,-72,-13,35,-64,-41,-17,-28,-48,23,-21,-14,127,-50,18,90,-38,1, 38,118,-60,0,-16,13,31,-31,32,53,-32,84,-58,-30,-76,46,1,18,-19,-9,-36,127,-64,127,43,55,97,127,71,73,127,-37,-124,13,-127,-104,-17,-12,127,-127,8,-99,-49,-51,44,-42,-66,70,-127,-105,85,127,-124,102,-111,34,-99,-44,45,14,-3,-88,-43,-59,-51,4,19,-66,-118,79,-52,127,-127,-52,53,42,-98,-127,18,-61,-110,20,-11,-34,127,86,-127,35,-90,-20,40,14,-4,127,-38,-56, 0,45,-10,-20,51,7,4,-75,-45,-9,-21,96,19,-60,9,-21,-26,-25,10,-29,-50,6,22,4,42,10,33,-41,8,12,44,-4,60,37,-30,101,-10,-66,-44,0,47,-127,15,5,-23,0,-42,-15,-72,0,16,30,-50,50,2,-56,63,14,35,-36,3,-77,-49,-87,-53,-2,127,-5,-64,40,-7,39,40,-23,18,48,-62,28,-21,-127,-127,27,-127,-20,-28,-10,-86,14,-65,2,104,95,-16,84,-16,-14, 
  /* [0][1][][] */ -127,-49,-14,-77,2,127,-18,-42,1,-43,-37,57,-127,47,22,57,25,72,127,1,53,3,127,3,7,45,72,-16,-13,-5,24,18,-64,-45,77,24,-44,-51,-51,-75,-9,-50,99,-32,-71,127,-74,-102,1,127,4,-35,-48,78,32,0,17,1,83,9,1,-24,43,-60,-33,4,-48,-13,-90,30,-62,8,29,127,8,-84,-64,-4,-53,-81,-15,17,47,-97,39,33,-87,44,-10,127,75,-83,127,17,-42,11, 25,127,127,83,-127,-122,127,-17,127,104,-94,-127,-114,127,-2,127,127,-127,-72,127,127,-68,26,-56,-127,-127,127,96,-127,127,-65,127,-105,127,103,-127,127,127,-13,-76,127,-73,-127,-109,127,-40,127,127,25,-125,127,-86,127,127,-127,127,-127,97,-127,127,-127,127,93,-127,78,127,-50,27,-127,-127,-46,-126,-77,78,127,66,73,-127,72,-63,-43,127,120,127,14,89,-52,127,-43,59,18,-100,-114,-40,-127,-10, -109,-41,-17,-30,36,80,-24,-45,-43,15,-10,114,-49,25,10,62,5,63,121,21,27,-22,110,10,29,32,20,-23,-11,-2,17,17,0,-68,73,94,-53,-56,-40,-34,-17,-62,-1,-19,-69,-3,-77,-113,4,124,-10,-1,103,15,74,-32,68,-4,66,-41,44,-27,-117,6,-26,24,-57,-50,-91,15,-83,-10,36,-65,-10,127,-127,3,-53,-48,-30,-2,41,-56,20,40,-117,17,-21,-26,115,127,-16,71,-28,9, 
  /* [0][2][][] */ -112,-117,-2,-64,43,59,-14,81,-37,4,34,65,-23,87,7,9,0,26,69,-43,-81,-15,43,-17,19,-5,-31,-53,26,-22,-9,18,87,-48,29,30,-15,-48,-22,-74,-47,-16,103,20,29,75,-90,17,-103,39,-9,-4,23,-97,19,-46,52,-19,22,-64,32,92,-37,94,-38,-54,120,63,-43,32,-75,-20,-8,-26,-27,-47,-70,-37,-2,-45,113,-15,-33,-50,14,-15,-94,-6,-8,29,20,48,18,-7,-16,6, -77,-36,-18,-29,-32,17,100,127,-62,127,127,58,-79,23,127,61,-35,-31,20,-55,-105,-37,15,-38,49,3,25,57,-7,81,-65,-15,36,-49,-26,-25,-126,81,-1,-38,-66,-12,-72,127,39,-56,19,-7,-40,50,-25,-64,55,44,-55,-31,-56,-127,116,-95,127,59,127,42,-127,-67,-18,-127,119,56,-127,16,-25,-51,9,-61,25,-59,8,-1,110,-14,-31,-43,16,-127,-74,-18,-127,26,43,-20,0,-116,-88,127, -54,-40,-47,-58,44,32,-16,45,-55,50,30,109,5,43,1,26,22,33,75,-19,-93,-3,64,-20,-11,-17,29,-60,19,-4,-27,14,127,-37,35,23,-45,12,-56,-57,-36,-69,19,37,7,33,-82,28,-37,34,-8,-6,-50,-49,14,-35,68,-27,66,-101,42,66,-2,103,-9,-43,9,8,-12,11,-70,-14,12,-61,-26,-57,-24,-23,67,6,59,-33,-29,-31,-2,-27,-118,-6,-5,12,31,49,25,70,-3,0, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0035992034245282412, 0.0086308959871530533, 0.012438575737178326, 0.0069473865441977978, 0.0086739473044872284, 0.012555638328194618, 0.015721682459115982, 0.0060857599601149559, 0.01461133174598217, 0.0097812050953507423, 0.0092189637944102287, 0.0032923487015068531, 0.0034740373957902193, 0.0038497275672852993, 0.011586768552660942, 0.0088731441646814346, 0.011794968508183956, 0.018025534227490425, 0.0048382654786109924, 0.012806328013539314, 0.0050101866945624352, 0.010869299992918968, 0.022223141044378281, 0.011660331860184669, 0.077634245157241821, 0.0094982367008924484, 0.005746934562921524, 0.0089126685634255409, 0.017038542777299881, 0.0074612102471292019, 0.0063726236112415791, 0.010134801268577576, 0.0034836921840906143, 0.010593337938189507, 0.0068342895247042179, 0.0086860591545701027, 0.0080829057842493057, 0.011583045125007629, 0.0096539771184325218, 0.0041635790839791298, 0.014919622801244259, 0.0034258365631103516, 0.0078299706801772118, 0.012084415182471275, 0.0089987535029649734, 0.0095261558890342712, 0.0067350734025239944, 0.020108951255679131, 0.003990627359598875, 0.010893016122281551, 0.0063986373133957386, 0.0097320610657334328, 0.0049344287253916264, 0.0038299246225506067, 0.014404705725610256, 0.010591641068458557, 0.0097265075892210007, 0.012517782859504223, 0.0070364116691052914, 0.0060158716514706612, 0.0084110293537378311, 0.0066983504220843315, 0.010672521777451038, 0.0052800634875893593, 0.011762138456106186, 0.0092690251767635345, 0.002973954426124692, 0.0050271828658878803, 0.004417856689542532, 0.012128265574574471, 0.0053067435510456562, 0.0079575385898351669, 0.011204906739294529, 0.008255835622549057, 0.0041525512933731079, 0.0068139685317873955, 0.0087949754670262337, 0.0092653036117553711, 0.0052067660726606846, 0.0073425560258328915, 0.0041032573208212852, 0.0070882472209632397, 0.0070027606561779976, 0.016537830233573914, 0.0081937303766608238, 0.0098539348691701889, 0.0025468922685831785, 0.0070857801474630833, 0.0077176638878881931, 0.0081922383978962898, 0.0019485744414851069, 0.010950647294521332, 0.013649387285113335, 0.0053282734006643295, 0.005166337825357914, 0.012296049855649471, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 769, 12447, 15, 3045, 1894, 14047, -3516, -510, 18240, -1080, 5907, 1570, 1681, 1116, 1005, -1855, -220, 6870, -166, 8324, 2239, 6316, -3533, -798, -8025, 392, 2637, 4815, 3720, 3860, 2517, 3187, 2631, 7377, 1403, 5877, 5558, 2970, 2935, 2632, 18863, 81, 661, 6621, 4986, 5872, 3976, 16100, 315, -1214, 1247, 6820, 1940, -842, 8592, -88, 1877, 11016, 2447, 1057, 2418, 10429, 3408, -834, 13823, 4491, 1115, 855, 7888, 5311, 3745, 3234, 532, 8292, 1421, 7695, -2063, 4586, 3420, 4681, 1590, 1244, 2006, 23937, 1326, 4476, 4372, 1120, -1432, 3106, 111, 10823, 6018, 3170, 2878, 4189, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00017772233695723116, 7.3299292125739157e-05, 0.00015011444338597357, 0.00015102257020771503, 0.00023858077474869788, 6.4431711507495493e-05, 0.0001034457454807125, 0.00027624311042018235, 5.6099746871041134e-05, 0.00017765507800504565, 0.00012822837743442506, 0.00017299024329986423, 0.00015725471894256771, 0.00030080522992648184, 0.00028385568293742836, 0.00016764855536166579, 0.00027359527302905917, 0.00010882558126468211, 0.00020199127902742475, 0.00010884807124966756, 0.00015940592857077718, 0.00011925122089451179, 0.00016032154962886125, 0.00015878501289989799, 0.00010331311204936355, 0.00018713308963924646, 0.00020272325491532683, 0.00012685311958193779, 0.00017641972226556391, 0.0001222094870172441, 0.00012969011731911451, 0.00016972796584013849, 0.0001375646679662168, 9.0155997895635664e-05, 0.00019247829914093018, 0.00011876534699695185, 0.00012240526848472655, 0.0002006850263569504, 0.00016759317077230662, 0.00018049096979666501, 5.1202358008595183e-05, 0.00024640603805892169, 0.00022217513469513506, 9.4945746241137385e-05, 0.00010642849520081654, 0.00012972329568583518, 0.00015474327665288001, 6.4743020629975945e-05, 0.00018797691154759377, 0.00017444173863623291, 0.00038485933328047395, 0.00012490624794736505, 0.0002736113965511322, 0.00021736057533416897, 0.00010034920705948025, 0.00029001018265262246, 0.00013510201824828982, 9.1372916358523071e-05, 0.00013252846838440746, 0.00024298920470755547, 0.0001601583935553208, 7.6913318480364978e-05, 0.00016541415243409574, 0.00015626107051502913, 6.387101166183129e-05, 0.00014440673112403601, 0.0002924166910815984, 0.00022899123723618686, 0.00010765818296931684, 0.00011413166794227436, 0.0001312003587372601, 0.00014668586663901806, 0.00019602221436798573, 0.0001083904062397778, 0.00023493899789173156, 0.00011294681462459266, 0.00018111079407390207, 0.00018116983119398355, 0.00017936750373337418, 0.00017864756227936596, 0.00022033104323782027, 0.00014502555131912231, 0.00015975003771018237, 4.6449906221823767e-05, 0.00013911363203078508, 0.00014252308756113052, 0.00015235140745062381, 0.00039212926640175283, 0.00018746686691883951, 0.00020099364337511361, 0.00029019938665442169, 8.5089421190787107e-05, 0.00011414520849939436, 0.00015386038285214454, 0.00017288696835748851, 0.00014473132614511997, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 110,-20,-75,106,-103,-59,61,82,70,63,-23,98,48,-89,49,127, 
  /* [1][0][][] */ 31,55,-13,-32,127,17,-55,7,13,63,-78,11,-17,34,-35,-80, 
  /* [2][0][][] */ -66,95,127,-66,79,100,-15,32,75,13,49,8,63,-91,74,10, 
  /* [3][0][][] */ 127,-10,22,51,11,9,-90,42,71,61,-85,18,-75,52,-80,10, 
  /* [4][0][][] */ -80,-30,35,38,-127,-31,-43,-36,-33,44,-48,-3,-5,73,-92,94, 
  /* [5][0][][] */ -119,-1,17,-56,83,40,49,-26,-28,39,-28,-18,-74,68,-127,-54, 
  /* [6][0][][] */ -125,-3,-24,56,-26,-127,123,39,-16,-62,-52,66,-10,87,-9,30, 
  /* [7][0][][] */ -27,67,18,-74,22,127,68,28,75,6,52,-25,51,27,-41,30, 
  /* [8][0][][] */ -60,-21,-61,33,-87,105,-25,-63,18,-45,108,36,127,42,-119,-3, 
  /* [9][0][][] */ -22,-53,-70,127,-8,-106,-10,14,0,98,16,115,-9,37,32,-53, 
  /* [10][0][][] */ 30,-90,-68,41,-1,63,6,-60,72,12,10,-43,62,127,-25,-7, 
  /* [11][0][][] */ -43,-17,-24,111,29,77,120,-27,-63,-47,49,-10,-45,110,-127,94, 
  /* [12][0][][] */ -22,-82,-107,39,-41,-127,25,118,88,32,-50,118,10,-71,33,16, 
  /* [13][0][][] */ -47,-24,-61,-11,-24,27,21,-6,-23,127,18,-30,27,0,-11,-10, 
  /* [14][0][][] */ -98,-27,-55,-17,43,70,-52,-43,127,-13,32,-54,-42,-8,5,-7, 
  /* [15][0][][] */ -36,-127,82,-10,-65,-2,7,26,25,-106,-75,-58,80,-23,-12,14, 
  /* [16][0][][] */ -23,-49,26,-75,36,83,-6,71,88,-127,46,-63,-91,24,-116,-109, 
  /* [17][0][][] */ -67,-4,8,-68,69,-22,-45,0,56,-16,-54,42,60,-51,-26,-127, 
  /* [18][0][][] */ 12,14,-47,-68,22,-11,103,-42,-47,-22,55,17,-28,127,46,-1, 
  /* [19][0][][] */ -53,-45,-6,-11,-53,22,13,48,12,-11,-6,-127,-54,-2,-88,-59, 
  /* [20][0][][] */ 51,88,44,-111,43,-17,-33,76,-127,-93,50,-29,-33,96,55,23, 
  /* [21][0][][] */ 6,-21,-90,127,109,-17,67,31,-82,-11,-56,-66,95,-61,-46,-35, 
  /* [22][0][][] */ 14,-20,52,35,18,-11,4,45,42,46,3,17,-36,-9,127,7, 
  /* [23][0][][] */ -98,-125,-18,61,121,-6,-2,-65,-47,62,-127,-89,87,33,5,58, 
  /* [24][0][][] */ 53,-8,100,-29,5,-67,48,-75,33,127,-110,116,51,-26,79,-93, 
  /* [25][0][][] */ 101,4,127,56,26,10,-43,-42,-54,33,63,-54,-103,24,85,35, 
  /* [26][0][][] */ -5,42,49,2,-47,95,-21,12,-45,-17,-82,60,15,45,40,-127, 
  /* [27][0][][] */ 68,41,-10,-34,-63,14,-66,10,-127,-51,-33,-82,-127,19,-50,113, 
  /* [28][0][][] */ -13,29,-5,6,35,-9,-127,-20,2,-4,1,14,6,-64,-20,-6, 
  /* [29][0][][] */ -24,-124,-19,33,-39,7,127,9,40,25,-112,72,52,-34,-94,49, 
  /* [30][0][][] */ 31,-56,-23,12,-127,14,33,9,65,-50,54,6,-38,96,27,119, 
  /* [31][0][][] */ -112,4,-32,127,-4,-2,-78,-55,14,-8,3,-118,-119,-24,-85,28, 
  /* [32][0][][] */ -84,-107,-53,5,-65,-62,11,20,51,-15,-14,-9,0,127,53,56, 
  /* [33][0][][] */ 5,12,-45,47,-125,-47,59,9,-109,-18,-7,-68,-35,70,127,37, 
  /* [34][0][][] */ 59,38,-39,62,-35,-37,32,-41,9,-127,-12,14,39,12,18,96, 
  /* [35][0][][] */ 51,0,-57,59,-85,96,33,15,5,0,83,-69,114,-4,-10,127, 
  /* [36][0][][] */ -3,-5,-76,62,127,-19,23,110,-27,21,-95,-63,-11,-65,-41,0, 
  /* [37][0][][] */ -127,42,-27,-83,-1,-67,4,-50,-37,-54,12,28,18,26,58,-31, 
  /* [38][0][][] */ 41,51,-4,-9,-47,-50,-113,12,-20,-71,18,30,-64,-127,54,-10, 
  /* [39][0][][] */ 14,-51,76,80,12,39,110,-37,-78,54,61,-19,40,127,68,56, 
  /* [40][0][][] */ 127,115,107,48,-48,-27,44,84,-108,78,50,0,-19,-67,-41,-81, 
  /* [41][0][][] */ -24,-70,-99,80,-90,127,48,50,-79,29,-54,-13,47,3,72,-82, 
  /* [42][0][][] */ -25,-104,2,-29,121,-11,59,25,29,-15,-75,-52,127,36,17,31, 
  /* [43][0][][] */ -86,-91,-5,0,119,14,-25,79,-98,-83,-127,-89,64,-87,-43,83, 
  /* [44][0][][] */ -68,-102,-104,-35,35,127,81,7,-10,-113,-86,15,-68,41,14,101, 
  /* [45][0][][] */ 58,-66,-124,0,-75,29,-76,-15,89,-19,-10,-123,-57,-127,17,79, 
  /* [46][0][][] */ 75,-127,-9,-58,76,-24,-91,62,5,-50,16,13,8,-107,113,-95, 
  /* [47][0][][] */ 7,-31,0,87,-17,-31,1,46,34,77,35,81,-79,127,19,90, 
  /* [48][0][][] */ 39,-40,-127,-121,23,-92,10,87,31,-82,38,90,-28,40,-19,-123, 
  /* [49][0][][] */ 21,59,67,45,47,-18,25,43,27,127,-43,24,42,-56,33,27, 
  /* [50][0][][] */ -30,23,39,1,-127,-36,-1,4,45,17,3,57,-7,-89,19,-2, 
  /* [51][0][][] */ 127,-70,-61,-84,-24,61,-59,-109,-3,29,-10,-71,66,123,-20,-14, 
  /* [52][0][][] */ 23,1,-25,-79,99,-94,-5,-36,27,40,127,-55,29,-48,-58,82, 
  /* [53][0][][] */ -41,-99,-20,-92,-48,-127,19,-65,21,59,-38,88,-62,64,55,-66, 
  /* [54][0][][] */ 5,127,72,-83,-47,7,-65,-65,45,55,27,71,-25,-7,43,3, 
  /* [55][0][][] */ -52,-9,-39,59,-123,6,26,0,-5,127,37,9,12,9,13,89, 
  /* [56][0][][] */ -6,-110,-127,38,-14,47,6,38,107,-51,81,22,-75,125,-5,69, 
  /* [57][0][][] */ 65,13,15,-67,12,57,-37,24,127,-6,47,92,36,8,87,-33, 
  /* [58][0][][] */ 112,-127,-94,-61,5,-5,16,105,27,17,9,46,55,109,100,-32, 
  /* [59][0][][] */ -36,-14,43,-31,-9,-48,-24,-39,38,32,-112,-64,-99,-81,127,-12, 
  /* [60][0][][] */ 51,3,-23,82,-3,-121,-127,13,-58,90,-26,77,-29,-20,-8,-8, 
  /* [61][0][][] */ 80,127,-19,-28,-96,-19,4,-122,-68,-38,72,15,-122,-80,51,60, 
  /* [62][0][][] */ -19,91,-2,57,-7,127,-65,8,-13,3,-56,-10,-87,11,52,-86, 
  /* [63][0][][] */ -2,35,38,-103,-26,-127,112,26,-16,-90,-35,35,-85,89,76,-10, 
  /* [64][0][][] */ -16,-40,-36,8,61,-127,0,82,-114,-99,-87,48,-29,94,95,68, 
  /* [65][0][][] */ -46,-50,-12,102,118,33,-88,23,-46,-40,21,-25,-127,111,-43,49, 
  /* [66][0][][] */ -29,30,-58,-1,-91,127,9,16,-79,8,-42,58,-8,57,73,-81, 
  /* [67][0][][] */ 35,-50,-103,-12,73,-86,23,-50,71,27,-2,123,-72,24,-27,-127, 
  /* [68][0][][] */ 11,-127,-47,44,-42,-14,20,124,105,45,74,26,-90,46,-53,-30, 
  /* [69][0][][] */ -34,83,127,-82,16,90,-59,90,56,-49,99,79,11,-112,28,-53, 
  /* [70][0][][] */ 42,72,48,-67,127,31,-126,-38,-65,11,36,49,-10,20,-119,-64, 
  /* [71][0][][] */ 25,-100,-49,-72,63,-6,-10,-7,-127,56,-46,10,72,59,44,123, 
  /* [72][0][][] */ 8,118,73,11,-3,-20,-106,-99,21,73,-11,63,29,101,-127,23, 
  /* [73][0][][] */ -24,12,67,-61,61,-109,66,-120,127,88,41,-29,53,-4,-70,115, 
  /* [74][0][][] */ -27,-19,-64,127,-107,-29,123,50,37,44,19,112,118,70,-90,11, 
  /* [75][0][][] */ -93,90,1,88,-107,116,24,-14,-127,8,-21,9,68,83,54,20, 
  /* [76][0][][] */ -71,66,-45,-15,-77,25,-2,0,39,50,-23,7,26,-56,-127,37, 
  /* [77][0][][] */ 37,12,-47,127,103,76,65,4,-8,0,45,-37,72,-36,28,23, 
  /* [78][0][][] */ -4,-26,3,-69,46,-101,51,-50,32,24,102,9,30,-21,-33,127, 
  /* [79][0][][] */ -39,38,-6,-16,44,-30,-26,-5,-127,35,28,13,120,-27,-17,-27, 
  /* [80][0][][] */ -21,56,36,-33,44,20,-36,-127,-36,43,-29,-38,-31,-42,22,45, 
  /* [81][0][][] */ 115,127,-26,15,-8,-53,100,124,-102,125,-21,-56,-80,3,86,93, 
  /* [82][0][][] */ 102,45,-40,-14,-94,-127,87,-1,-50,-2,-5,60,76,4,59,32, 
  /* [83][0][][] */ 31,1,65,50,37,60,-6,-126,56,-54,127,13,101,-57,-39,-114, 
  /* [84][0][][] */ -98,-71,-48,30,37,127,84,-8,89,51,25,71,71,92,-125,-17, 
  /* [85][0][][] */ 10,58,112,-56,77,12,-2,18,52,88,-6,-19,-79,127,95,48, 
  /* [86][0][][] */ -1,22,-77,-30,-40,45,41,44,4,-50,127,2,-12,8,-11,0, 
  /* [87][0][][] */ 16,-41,32,-24,44,-127,23,-24,50,4,35,-28,15,-9,-41,46, 
  /* [88][0][][] */ -90,-42,20,-12,62,-1,10,-50,-105,-88,63,-127,99,69,83,-98, 
  /* [89][0][][] */ -28,47,-16,10,-16,127,-19,32,-50,51,-25,37,-43,34,5,-92, 
  /* [90][0][][] */ 34,-127,-91,-7,121,-105,44,38,-80,-113,-100,74,28,-57,41,86, 
  /* [91][0][][] */ -6,42,-22,1,-68,-52,-4,22,-127,-26,39,-109,-41,-18,5,52, 
  /* [92][0][][] */ 62,30,27,127,-127,-45,2,40,-65,-7,10,-9,-113,-121,42,-24, 
  /* [93][0][][] */ -25,-25,-107,-14,-42,-11,24,69,127,-37,32,19,-108,45,16,7, 
  /* [94][0][][] */ 86,22,76,5,38,-52,-21,17,0,56,-12,76,28,28,127,20, 
  /* [95][0][][] */ -27,-56,-43,-55,127,15,18,80,29,-12,-127,-38,50,-21,-4,-37, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0030804264824837446, 0.0012704822001978755, 0.0026019040960818529, 0.0026176446117460728, 0.0041352738626301289, 0.0011167821940034628, 0.0017930048052221537, 0.0047880676575005054, 0.00097236590227112174, 0.0030792606994509697, 0.0022225573193281889, 0.002998405834659934, 0.0027256652247160673, 0.0052137980237603188, 0.0049200146459043026, 0.0029058195650577545, 0.0047421730123460293, 0.001886252430267632, 0.0035010753199458122, 0.0018866423051804304, 0.0027629516553133726, 0.0020669579971581697, 0.0027788218576461077, 0.0027521895244717598, 0.0017907059518620372, 0.0032435411121696234, 0.0035137624945491552, 0.0021987203508615494, 0.0030578484293073416, 0.0021182331256568432, 0.002247893251478672, 0.0029418615158647299, 0.0023843813687562943, 0.0015626562526449561, 0.0033361886162310839, 0.0020585365127772093, 0.0021216263994574547, 0.003478434169664979, 0.0029048596043139696, 0.0031284145079553127, 0.00088748044800013304, 0.0042709074914455414, 0.0038509180303663015, 0.0016456759767606854, 0.0018447042675688863, 0.0022484683431684971, 0.0026821347419172525, 0.0011221780441701412, 0.0032581668347120285, 0.0030235643498599529, 0.0066706915386021137, 0.0021649755071848631, 0.0047424528747797012, 0.0037674682680517435, 0.0017393331509083509, 0.0050266897305846214, 0.002341696759685874, 0.0015837488463148475, 0.0022970899008214474, 0.0042116842232644558, 0.0027759941294789314, 0.0013331234222277999, 0.0028670909814536572, 0.0027084425091743469, 0.0011070637265220284, 0.0025029734242707491, 0.0050684013403952122, 0.0039690602570772171, 0.0018660181667655706, 0.0019782218150794506, 0.0022740701679140329, 0.0025424773339182138, 0.0033976146951317787, 0.0018787096487358212, 0.0040721516124904156, 0.001957684988155961, 0.0031391577795147896, 0.0031401810701936483, 0.0031089417170733213, 0.0030964631587266922, 0.0038189548067748547, 0.0025136994663625956, 0.0027689160779118538, 0.00080510711995884776, 0.0024112293031066656, 0.0024703247472643852, 0.0026406771503388882, 0.006796699482947588, 0.0032493264880031347, 0.0034837834537029266, 0.0050299689173698425, 0.001474838238209486, 0.0019784565083682537, 0.0026668317150324583, 0.0029966158326715231, 0.0025085997767746449, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -9291, 18103, -16340, 5597, 11717, -16093, -34001, 611, -9532, 9293, -15805, -10617, 8248, -7902, -9492, 7179, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 8.9718283561524004e-05, 9.526492067379877e-05, 0.00011117536632809788, 0.00017625691543798894, 7.1958231274038553e-05, 0.00010705061140470207, 9.1474576038308442e-05, 0.00011996470129815862, 7.1195478085428476e-05, 7.6086536864750087e-05, 0.00014436215860769153, 0.00013827656221110374, 0.00012116998550482094, 8.2783335528802127e-05, 0.00010377783473813906, 0.00010510784341022372, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 41,52,1,-21,60,55,-42,34,7,127,-9,34,-23,4,-12,27,42,70,44,-35,-70,78,8,61,54,46,61,56,-51,-37,-21,55,2,36,-78,73,51,-106,-11,60,23,-29,8,4,-3,-45,-32,-24, 
  /* [1][0][][] */ -21,-22,-46,-88,-26,74,-78,-13,17,-32,-88,17,94,-58,-7,9,-37,-64,-59,19,-88,89,-109,-58,-21,-55,78,61,8,-60,39,-72,37,-93,-39,75,45,-83,127,-33,-21,5,-88,-28,24,63,23,42, 
  /* [2][0][][] */ 19,24,81,-63,-18,-99,23,8,75,48,-69,24,127,-85,105,99,-57,-17,-21,53,67,-64,-33,-126,-23,-56,67,-84,24,12,-51,-7,58,-22,36,35,-36,-10,19,-64,68,31,84,7,6,-88,105,12, 
  /* [3][0][][] */ 17,-14,4,-11,27,75,24,-50,21,-45,5,-4,-51,-13,34,50,-50,-61,36,-127,-14,-9,-32,0,-30,64,91,57,-6,-19,28,14,47,-51,34,30,-37,-59,5,27,34,6,-27,19,10,36,-10,-43, 
  /* [4][0][][] */ 127,4,31,-57,91,70,13,5,69,-41,-117,14,42,-23,57,-26,-90,-127,26,-77,-23,47,-65,-67,-45,123,-118,107,-76,-92,14,49,64,-20,-14,-8,11,-15,-12,31,-34,-14,-6,106,-68,55,-36,-50, 
  /* [5][0][][] */ -2,-29,-43,-14,-24,76,3,-42,58,46,35,87,59,-10,64,10,-63,127,-13,65,-4,-7,-84,-26,47,-10,-63,-31,6,26,53,-33,-37,-4,39,43,-59,16,-119,-10,74,-31,44,68,-29,-24,-60,47, 
  /* [6][0][][] */ 44,4,46,42,-5,-35,78,-2,-14,44,109,116,14,32,-55,7,4,-34,-13,50,55,-51,-12,49,-52,82,60,-11,78,67,13,6,61,-70,-92,-4,58,46,3,5,35,47,57,-32,83,127,24,-13, 
  /* [7][0][][] */ -65,-6,18,68,-40,-45,21,62,99,94,-62,-81,-103,12,-41,24,-79,73,-33,107,-41,50,17,83,19,-97,7,-82,51,-39,-11,-12,26,-16,-2,-25,17,-127,102,11,29,23,37,-29,21,55,-34,26, 
  /* [8][0][][] */ -12,-111,76,-64,75,-79,79,-23,-46,-127,16,-7,-29,66,53,34,-4,12,-19,111,9,27,-27,60,42,-43,-96,-45,-108,-57,-58,-99,26,-81,-11,96,-29,38,116,3,38,-8,103,123,-28,-74,-29,46, 
  /* [9][0][][] */ 9,-55,18,-64,21,85,-47,25,0,-65,-33,-11,0,-65,82,-18,-6,-104,67,37,-79,89,51,-23,-1,-63,-26,71,56,76,-32,-49,-42,44,10,127,-27,-22,-91,-37,-4,2,30,62,50,75,-67,37, 
  /* [10][0][][] */ 1,-1,-7,-29,20,30,-60,-31,59,46,56,-18,-31,-24,47,-13,-45,127,-42,52,-17,-26,25,8,-43,43,18,109,34,16,-32,-28,63,5,1,21,-13,-54,-54,11,-83,-5,40,-66,9,59,17,47, 
  /* [11][0][][] */ -30,33,-20,48,-17,40,-8,-13,-2,13,-118,-81,63,16,-3,-55,17,13,-21,-46,0,17,127,25,37,1,-23,18,-1,11,-15,45,27,3,-28,-13,32,64,108,-2,16,-20,46,-13,-49,7,82,6, 
  /* [12][0][][] */ -46,22,-14,74,-20,-5,-19,8,-30,-31,-110,19,48,-108,27,-6,43,94,109,-127,-13,42,-51,-52,-14,-24,-9,20,-26,54,11,89,53,44,81,-52,-62,17,21,12,-38,25,35,48,59,-47,-49,-63, 
  /* [13][0][][] */ -64,-127,-14,-115,16,19,62,63,-118,23,92,-48,37,43,87,6,55,32,50,-78,55,-75,60,9,-66,45,-31,-4,-12,-87,-85,8,21,26,-44,27,16,-63,69,-93,-3,24,55,22,30,-6,83,-45, 
  /* [14][0][][] */ 78,39,-31,-13,-36,24,-78,-62,-26,76,53,35,-42,-80,54,-52,90,-110,7,-4,88,-61,7,-17,6,126,-95,19,-55,-23,-110,-7,127,57,107,24,-78,15,6,63,-12,-14,67,-8,-44,-38,-34,19, 
  /* [15][0][][] */ -62,18,27,13,79,6,1,28,43,35,-8,29,36,-7,-43,-6,2,40,-31,-41,11,-53,-44,-34,45,-82,-7,80,-47,11,25,-9,-53,-26,127,-2,-85,-6,38,-7,-62,-27,10,-19,-38,-33,-11,12, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0038130269385874271, 0.0040487591177225113, 0.0047249528579413891, 0.0074909189715981483, 0.0030582246836274862, 0.0045496509410440922, 0.0038876694161444902, 0.0050984998233616352, 0.003025807673111558, 0.0032336777076125145, 0.0061353915371000767, 0.0058767539449036121, 0.0051497244276106358, 0.003518291749060154, 0.0044105579145252705, 0.004467083141207695, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 11717, 245, 14367, -155, 12163, -1386, 38984, -771, 6160, 26437, 9098, 32136, -2243, 12084, 31307, 30354, 522, 7628, 831, 47521, -566, 21331, 1233, 14432, 12870, 39819, -828, -1269, -9078, 20433, 15792, -99, 1082, -7624, 2622, 18572, 9222, 24443, 2980, 20238, 33278, 653, 1065, 14746, -1178, -3263, 40597, 22192, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.604320464655757e-05, 9.7316311439499259e-05, 9.1808396973647177e-05, 0.00063852500170469284, 0.00012997163867112249, 9.4531169452238828e-05, 6.3024446717463434e-05, 0.00039471691707149148, 0.00011740309855667874, 7.4697723903227597e-05, 4.3321109842509031e-05, 8.0678742961026728e-05, 6.5880689362529665e-05, 0.00013394161942414939, 4.838903623749502e-05, 9.5491981483064592e-05, 0.00010445287625771016, 4.3022744648624212e-05, 0.00013206656149122864, 5.1675429858732969e-05, 5.1859278755728155e-05, 7.5243420724291354e-05, 0.00013939040945842862, 0.00014895506319589913, 6.7182852944824845e-05, 7.327574712689966e-05, 7.6763302786275744e-05, 6.9352041464298964e-05, 0.00022693705977872014, 9.3626462330576032e-05, 0.0001060199792846106, 0.00054562691366299987, 0.0002030924370046705, 9.7361946245655417e-05, 8.1472520832903683e-05, 0.00011367551633156836, 9.8828721093013883e-05, 7.7087031968403608e-05, 5.8128651289734989e-05, 7.2184659074991941e-05, 4.5769269490847364e-05, 0.00016074554878287017, 0.00046695696073584259, 9.9361204775050282e-05, 0.00014782766811549664, 6.6218912252224982e-05, 4.0292947232956067e-05, 6.2324470491148531e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -24,74,-127,71,-27,70,-58,49,-34,-105,92,-80,38,-80,-50,-46,77,81,105,-83,66,-80,68,-51,-127,-47,103,71,-106,-111,-71,61,88,-73,56,-91,-109,-38,124,-76,-39,-98,88,-127,112,64,-46,-94, -123,102,-75,91,-31,89,-57,87,-84,-127,120,-104,73,-109,-85,-104,127,92,98,-108,71,-126,80,-29,-95,-64,125,92,44,-101,-127,107,119,-112,62,-127,-127,-64,125,-127,-96,98,120,-59,-40,99,-86,-127, -37,42,-8,40,-52,70,-31,50,-47,-38,63,-35,38,-42,-17,-21,67,61,64,-34,63,-11,35,29,-90,-42,66,4,96,-58,-27,79,37,-55,19,-22,-65,-11,66,-100,-122,6,55,-70,-79,63,-60,-24, 
  /* [0][1][][] */ -7,115,-68,100,-55,118,-125,45,-16,-84,74,-110,94,-107,-120,-82,65,127,-27,-105,80,-127,97,-51,-98,-89,94,106,-127,-93,-74,95,79,42,101,-11,-114,-110,114,-77,-127,-116,95,-69,127,77,-87,-105, -127,127,-97,127,-127,127,-127,127,-127,-109,127,-127,127,-126,-127,-80,94,119,3,-127,127,-115,127,-127,-25,-127,127,127,59,-127,-47,127,127,57,127,-104,-7,-127,127,-71,-123,127,127,-65,-64,127,-127,-98, -13,98,-42,64,-90,53,-57,83,-34,-29,46,-87,73,-127,-80,-14,59,107,20,-80,77,-30,14,8,-39,-52,25,80,119,-75,-44,67,69,-15,43,-29,-19,-100,71,-61,-68,-15,39,-72,-76,45,-4,11, 
  /* [0][2][][] */ -20,72,1,79,2,60,-30,33,-31,-54,54,-46,107,-64,-58,-73,-25,91,-127,-57,30,-70,58,-82,-98,-35,19,9,-98,-58,-44,35,29,109,65,-99,-60,-37,70,-97,-114,-107,42,-35,70,73,-20,-98, -96,50,-38,95,-54,56,-15,14,-68,-19,85,-101,108,-89,-54,-127,15,72,-99,-68,59,-50,58,-108,-45,-56,3,56,57,-76,-32,37,40,127,78,-114,-22,-53,65,-80,-51,68,61,-44,-57,106,-47,-73, -105,56,-51,54,-16,61,-59,-39,27,11,51,-49,67,-46,-22,-15,30,69,-75,-50,7,-32,30,-39,-4,-21,-20,46,89,-41,-49,-52,-7,82,37,-25,-19,-33,20,-34,-42,-24,22,-63,-32,46,-37,-9, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0036568359937518835, 0.0041359430178999901, 0.0039018567185848951, 0.027137313038110733, 0.0055237947963178158, 0.0040175747126340866, 0.0026785389054566622, 0.016775468364357948, 0.0049896314740180969, 0.0031746532768011093, 0.0018411471974104643, 0.0034288463648408651, 0.0027999291196465492, 0.0056925187818706036, 0.0020565339364111423, 0.0040584090165793896, 0.0044392473064363003, 0.0018284666584804654, 0.0056128287687897682, 0.0021962057799100876, 0.0022040193434804678, 0.0031978453043848276, 0.0059240921400487423, 0.0063305902294814587, 0.0028552713338285685, 0.00311421905644238, 0.0032624402083456516, 0.0029474615585058928, 0.0096448250114917755, 0.0039791245944797993, 0.004505848977714777, 0.02318914420902729, 0.0086314287036657333, 0.0041378824971616268, 0.0034625821281224489, 0.0048312093131244183, 0.0042002205736935139, 0.0032761988695710897, 0.0024704677052795887, 0.0030678478069603443, 0.0019451938569545746, 0.006831685546785593, 0.019845670089125633, 0.0042228512465953827, 0.0062826760113239288, 0.0028143036179244518, 0.0017124502919614315, 0.0026487899012863636, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2742, -2316, 1504, -4173, 5108, -890, 8465, -3640, 93, 563, 701, 4950, 1092, -942, 531, 6785, -2607, 2469, 6376, 64, 176, 1367, -1310, 6886, 2043, 1494, -83, -1411, 10454, -307, 2813, -3704, -2428, 3536, -844, 2741, 1978, 413, 142, 2091, 1862, 6908, -4445, 1689, 2482, -22, 1575, 548, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00021719123469665647, 0.00020153906370978802, 0.00026813644217327237, 0.00016306426550727338, 0.00015745255223009735, 0.00024367573496419936, 0.00011588238703552634, 0.00016542372759431601, 0.00030637270538136363, 0.00020449020667001605, 0.0002999252756126225, 0.00016463408246636391, 0.00028048301464878023, 0.00025343763991259038, 0.00024738817592151463, 0.00014787583495490253, 0.00019562793022487313, 0.00026802584761753678, 0.00013995930203236639, 0.00027989299269393086, 0.00026856447220779955, 0.0003408673801459372, 0.00018376331718172878, 0.00013850130198989064, 0.00023838401830289513, 0.00024176995793823153, 0.00037642984534613788, 0.00024690915597602725, 9.9030461569782346e-05, 0.00033914274536073208, 0.00021438005205709487, 0.00011678558075800538, 0.00015409081242978573, 0.00020929153834003955, 0.00029363602516241372, 0.00020708794181700796, 0.00024603749625384808, 0.00025807725614868104, 0.00024666814715601504, 0.00026862852973863482, 0.00027494854293763638, 0.00012890754442196339, 0.00015202607028186321, 0.0002084372827084735, 0.00025673393975012004, 0.00029108184389770031, 0.00024722731905058026, 0.00040828419150784612, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 32,74,127,28,38,98,-38,-39, 
  /* [1][0][][] */ 2,-100,-127,11,92,67,103,4, 
  /* [2][0][][] */ -127,-18,-61,-31,38,48,-67,-58, 
  /* [3][0][][] */ -11,8,94,-3,-40,-127,23,-34, 
  /* [4][0][][] */ -127,62,-71,-5,15,-25,-84,-98, 
  /* [5][0][][] */ -102,12,-42,-16,60,0,-30,-127, 
  /* [6][0][][] */ -43,-127,-115,37,74,-5,44,53, 
  /* [7][0][][] */ -103,-127,-113,-20,-63,-50,13,99, 
  /* [8][0][][] */ 46,29,37,27,83,-3,-127,33, 
  /* [9][0][][] */ -71,73,-56,116,-94,-42,127,-11, 
  /* [10][0][][] */ -18,127,68,53,101,-48,2,51, 
  /* [11][0][][] */ -63,-31,-12,-33,-87,80,127,-20, 
  /* [12][0][][] */ 57,22,-127,43,-1,-35,-35,-23, 
  /* [13][0][][] */ 66,2,-36,-12,-26,-127,-46,-43, 
  /* [14][0][][] */ -13,-100,115,54,124,-127,-4,-42, 
  /* [15][0][][] */ -15,-54,5,127,45,55,-31,13, 
  /* [16][0][][] */ 87,61,8,33,95,-127,-97,-20, 
  /* [17][0][][] */ 53,127,74,93,45,50,46,-95, 
  /* [18][0][][] */ 46,-55,0,-9,127,-4,61,-52, 
  /* [19][0][][] */ -13,115,3,19,-127,36,2,-6, 
  /* [20][0][][] */ -90,42,120,-108,40,-6,-67,127, 
  /* [21][0][][] */ -42,55,44,-127,5,5,-20,114, 
  /* [22][0][][] */ -55,-48,-93,14,-127,117,121,-48, 
  /* [23][0][][] */ 59,30,-127,4,13,-50,-90,-1, 
  /* [24][0][][] */ -57,62,22,-22,-45,69,-127,106, 
  /* [25][0][][] */ -115,-44,-127,26,-49,-83,65,102, 
  /* [26][0][][] */ 30,2,-11,-41,104,-38,127,-30, 
  /* [27][0][][] */ 127,-90,53,30,32,-10,43,62, 
  /* [28][0][][] */ 0,51,35,11,127,-64,82,-11, 
  /* [29][0][][] */ -5,-24,-1,-56,-44,21,127,-54, 
  /* [30][0][][] */ -15,-127,-3,-60,-74,34,20,-28, 
  /* [31][0][][] */ 16,57,8,-67,-127,-38,7,-28, 
  /* [32][0][][] */ 69,-65,-62,10,-19,-122,62,-127, 
  /* [33][0][][] */ 36,127,10,6,25,-20,-49,18, 
  /* [34][0][][] */ -127,-28,61,-5,-6,78,63,27, 
  /* [35][0][][] */ -5,100,127,-7,-94,-67,-48,-26, 
  /* [36][0][][] */ -66,-18,55,-26,-19,127,43,55, 
  /* [37][0][][] */ -14,-127,2,-116,-4,-78,105,12, 
  /* [38][0][][] */ 41,1,66,-58,53,53,-127,18, 
  /* [39][0][][] */ -4,59,-127,-2,1,-21,-33,92, 
  /* [40][0][][] */ 83,-68,4,32,-2,-4,24,127, 
  /* [41][0][][] */ 19,60,127,-24,49,-1,-98,29, 
  /* [42][0][][] */ 40,-114,-127,4,-100,-4,1,-71, 
  /* [43][0][][] */ -18,-104,45,-102,127,-80,38,55, 
  /* [44][0][][] */ -7,78,127,-33,37,2,23,31, 
  /* [45][0][][] */ -54,20,-14,81,-127,63,-89,18, 
  /* [46][0][][] */ -46,-33,83,3,-120,-127,-40,-7, 
  /* [47][0][][] */ -29,23,16,-114,-127,20,-12,19, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0023936668876558542, 0.0022211642935872078, 0.002955134492367506, 0.0017971331253647804, 0.001735286321491003, 0.002685552928596735, 0.0012771410401910543, 0.001823136699385941, 0.0033765370026230812, 0.0022536888718605042, 0.0033054796513170004, 0.0018144339555874467, 0.0030912063084542751, 0.0027931388467550278, 0.0027264677919447422, 0.0016297411639243364, 0.0021560175810009241, 0.0029539158567786217, 0.0015424930024892092, 0.0030847038142383099, 0.0029598518740385771, 0.0037567031104117632, 0.0020252575632184744, 0.001526424428448081, 0.0026272328104823828, 0.0026645492762327194, 0.0041486374102532864, 0.0027211885899305344, 0.001091415761038661, 0.0037376959808170795, 0.0023626848123967648, 0.0012870951322838664, 0.0016982365632429719, 0.0023066042922437191, 0.0032361659687012434, 0.0022823184262961149, 0.0027115819975733757, 0.002844272181391716, 0.002718532457947731, 0.0029605580493807793, 0.0030302109662443399, 0.0014206914929673076, 0.0016754809767007828, 0.0022971895523369312, 0.002829467412084341, 0.0032080160453915596, 0.0027246950194239616, 0.0044997045770287514, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 6124, 344, 24934, -2228, 10601, -16114, 459, -13929, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.3639588158112019e-05, 8.9332424977328628e-05, 0.0001223984727403149, 0.00011059136159019545, 9.7478907264303416e-05, 0.00014830614964012057, 8.7010274000931531e-05, 9.0998517407570034e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -48,-43,-9,-30,11,-13,63,86,-54,-52,-13,5,-28,-8,-74,44,-127,17,30,61,30,-2,-14,44,28,26,21,-2,-35,-18,-73,-64,-38,72,2,-21,6,-2,69,14,26,-21,-29,-33,15,-4,-11,-56, 
  /* [1][0][][] */ -19,82,-22,-41,-82,66,-16,-12,-48,77,-16,17,85,36,-53,2,-14,-109,59,-40,110,3,-104,9,62,-35,-116,69,24,-12,91,32,-47,9,-5,-56,3,109,-26,-23,109,52,5,3,127,10,-44,28, 
  /* [2][0][][] */ -21,-7,96,45,95,-44,-37,23,-49,-8,-8,36,-34,-35,-48,-127,-38,-122,-42,8,-104,7,-39,-44,-60,-13,9,-18,-38,11,4,-16,-52,0,19,-11,21,-36,-56,-1,60,-45,11,-71,-38,-40,-83,-73, 
  /* [3][0][][] */ 20,10,34,9,7,16,49,86,-44,-24,58,-1,-65,54,-17,31,14,43,-18,15,-78,-36,113,-17,-14,-32,-69,-13,-86,65,127,-65,-23,-84,-24,42,31,-63,-14,91,-47,-64,84,20,-88,-46,59,-30, 
  /* [4][0][][] */ -19,-1,74,-45,0,-4,17,-36,-36,-15,-2,1,26,-64,22,-111,-4,53,-8,-43,22,63,-16,-4,-37,-16,58,-5,16,46,-127,-63,-26,-2,-1,1,29,-20,64,11,-12,-40,-76,19,-25,-71,34,6, 
  /* [5][0][][] */ 16,-87,42,67,46,39,13,1,-71,-26,-51,34,25,14,21,-35,103,74,28,2,94,-45,127,-105,-9,30,8,81,4,37,-43,-50,64,-52,-51,47,-3,7,45,24,-95,39,12,35,40,-30,91,26, 
  /* [6][0][][] */ -62,81,-120,27,39,-39,41,-28,-14,-25,46,-57,-98,-33,-31,66,-99,35,-24,114,-25,53,-47,-92,-14,38,28,85,-1,-53,-87,10,19,72,-27,-47,-48,9,86,-25,76,61,-127,-52,-48,124,-15,-38, 
  /* [7][0][][] */ 40,38,-50,30,-6,36,45,48,16,30,-112,25,-43,5,-42,-81,47,27,127,102,77,-46,99,80,78,59,29,107,-59,-9,46,-81,30,-75,-10,50,-41,66,-34,63,-75,41,-20,-66,69,-29,25,12, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0039796824567019939, 0.0037966279778629541, 0.0052019348368048668, 0.0047001326456665993, 0.0041428534314036369, 0.0063030114397406578, 0.0036979364231228828, 0.0038674368988722563, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -5728, 14618, -1254, -541, 96, -866, -278, 1459, -3324, 4169, -13944, -289, 1740, -1211, -3164, 3630, 8089, -761, 2042, -7911, -6543, -468, 13436, 661, -57, -43, 5235, -4434, 1190, -4601, -11618, 7963, 4171, -845, 6972, -267, -70, -1734, 19757, -273, 4892, -3006, 3161, -1765, 2649, 16557, 12372, -537, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00016171565221156925, 0.00012751197209581733, 0.00053242978174239397, 0.0002399854565737769, 0.00018358282977715135, 0.0001655783416936174, 0.00019813129620160908, 0.00032914022449404001, 7.6608303061220795e-05, 0.00010766810009954497, 9.3401402409654111e-05, 0.00082860514521598816, 0.00075497757643461227, 0.00031906520598568022, 0.00037333217915147543, 0.00070607603993266821, 0.00014744856161996722, 0.00010043728980235755, 0.00026916959905065596, 0.00022649447782896459, 0.00024906496400944889, 0.00026925595011562109, 0.00011310684203635901, 0.00047324813203886151, 0.00018111382087226957, 0.00041188002796843648, 0.00025260340771637857, 0.00032403029035776854, 0.00017756881425157189, 0.00027545288321562111, 0.00010516282054595649, 0.00015803669521119446, 0.00013707221660297364, 0.00023810281709302217, 0.00010989030124619603, 0.00027310414589010179, 0.0035329402890056372, 0.00026585918385535479, 0.00012541918840724975, 0.00015098509902600199, 0.00022565096151083708, 0.00012752576731145382, 0.00020127461175434291, 0.00020773903816007078, 0.00051015353528782725, 4.1122082620859146e-05, 6.8334768002387136e-05, 0.00020371875143609941, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -12,-127,10,24,-31,-91,-40,115,-26,-56,40,29,29,-13,-29,8,127,5,39,-21,9,-26,-54,16,-13,-44,-56,-43,-53,106,-19,-127,94,17,-55,17,-21,-27,-21,92,-18,72,-31,36,-1,71,113,-9, -71,-38,-21,127,-78,42,-115,127,48,21,100,32,19,24,27,-41,-40,46,29,80,14,127,8,127,116,-42,-82,13,31,-113,-14,-14,127,3,-12,-75,11,31,-127,-43,-127,-20,-127,-127,39,95,-97,49, 13,-65,7,47,-47,44,40,-62,22,-81,71,21,13,-16,-17,10,-55,14,-46,-20,8,-44,127,7,-29,7,46,37,-11,93,-5,-8,23,-34,-65,-10,13,16,2,1,38,-32,17,-1,-11,88,7,-33, 
  /* [0][1][][] */ -19,-57,-17,-18,46,-127,127,-66,-38,-41,-6,10,73,7,10,-14,1,-83,13,6,36,-62,3,-11,-62,127,-102,-62,127,-116,43,-93,-117,10,-87,75,-12,-61,-49,13,108,127,-29,-96,-89,-53,-56,127, 127,-116,127,-15,127,58,-50,-94,90,127,127,-127,-127,127,127,127,69,78,96,127,127,77,-27,0,127,-68,-127,90,18,127,127,-43,-106,127,96,127,-127,127,-100,-65,37,34,-105,4,127,-127,-108,51, 29,-9,-31,-22,-37,27,-84,113,90,-112,33,43,2,2,-23,-41,-1,2,-127,36,7,-76,-11,-9,14,6,54,127,-114,-65,50,-44,-100,3,30,-40,45,11,1,-127,88,14,29,80,-54,80,84,-62, 
  /* [0][2][][] */ 14,27,7,-19,28,-36,7,-51,-34,-17,-53,-6,-12,-22,-5,-16,-62,38,38,-74,20,-7,126,-22,-91,-17,10,-2,23,29,44,73,-11,-14,-77,20,-11,-25,-20,110,-22,16,35,-19,-59,7,-101,35, 52,-16,-33,-28,33,75,110,-31,127,-102,-16,-1,-82,-4,19,-89,-7,127,7,86,4,40,-55,-76,-49,36,70,-19,-77,-6,36,-29,65,-15,-127,-15,44,-47,-62,52,-105,-23,39,36,27,76,-96,-72, 59,36,6,-46,22,13,18,-99,-93,-49,47,2,46,-9,-10,4,66,39,-51,-12,1,7,-80,-21,-1,-30,18,-37,-48,42,68,48,35,-6,-53,-57,-1,-11,22,-17,1,24,27,84,-30,-24,127,-61, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0068729151971638203, 0.0054192584939301014, 0.022628264501690865, 0.010199381969869137, 0.0078022703528404236, 0.0070370794273912907, 0.0084205800667405128, 0.01398845948278904, 0.0032558529637753963, 0.0045758942142128944, 0.003969559445977211, 0.035215716809034348, 0.032086547464132309, 0.013560270890593529, 0.015866616740822792, 0.030008232221007347, 0.0062665636651217937, 0.0042685847729444504, 0.011439708061516285, 0.0096260150894522667, 0.010585260577499866, 0.01144337747246027, 0.004807040560990572, 0.02011304534971714, 0.007697337307035923, 0.017504900693893433, 0.010735644958913326, 0.01377128716558218, 0.0075466744601726532, 0.011706747114658356, 0.0044694198295474052, 0.006716559175401926, 0.0058255693875253201, 0.010119369253516197, 0.0046703377738595009, 0.011606926098465919, 0.15014995634555817, 0.011299015022814274, 0.005330315325409174, 0.0064168665558099747, 0.0095901656895875931, 0.0054198447614908218, 0.0085541708394885063, 0.0088289091363549232, 0.021681524813175201, 0.0017476885113865137, 0.002904227701947093, 0.0086580468341708183, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2682, 3288, 11151, 4527, 3598, -335, 4537, 6252, 2905, 193, 5907, -2721, 20095, -715, 3637, 14055, 236, 2071, 255, 3710, 2094, 2576, 509, 22581, 2513, 2464, 4307, 5363, 4225, 3111, 446, 1183, 2227, 2632, -81, -757, -3953, 260, 3683, 2347, 2505, 1255, 1887, 5144, 16902, 4263, 1132, 2716, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00022527833061758429, 0.00023506885918322951, 8.3330094639677554e-05, 0.00013492350990418345, 0.0001860835327534005, 0.000404116086428985, 0.0001752502575982362, 0.00013385122292675078, 0.00022450913093052804, 0.00028518657200038433, 0.00012635129678528756, 0.000185767887160182, 5.1257658924441785e-05, 0.0002368309797020629, 0.0002027918235398829, 7.1457150625064969e-05, 0.00031381615553982556, 0.00024614471476525068, 0.00033094218815676868, 0.00020885540288873017, 0.00029491822351701558, 0.00019380167941562831, 0.00036380087840370834, 5.0038626795867458e-05, 0.00026564311701804399, 0.00022299197735264897, 0.00013474823208525777, 0.00015358687960542738, 0.0001799013843992725, 0.00022846052888780832, 0.00026550749316811562, 0.00035363849019631743, 0.00019996009359601885, 0.00018792902119457722, 0.00032642361475154757, 0.00024954654509201646, 0.00017348685651086271, 0.00027234136359766126, 0.00022276147501543164, 0.00027383610722608864, 0.0002166219346690923, 0.00036361423553898931, 0.00033096992410719395, 0.00016558385686948895, 6.4011474023573101e-05, 0.00017004768596962094, 0.00038084911648184061, 0.00019467451784294099, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 99,66,-78,-74,39,127,84,76, 
  /* [1][0][][] */ 58,-54,34,-127,-41,30,-37,-50, 
  /* [2][0][][] */ -34,127,118,52,108,19,51,32, 
  /* [3][0][][] */ 54,55,-34,41,-8,-55,-127,-23, 
  /* [4][0][][] */ -69,-4,3,-41,-13,64,127,30, 
  /* [5][0][][] */ 68,63,-127,-20,99,90,9,-15, 
  /* [6][0][][] */ -9,127,47,66,63,9,5,-35, 
  /* [7][0][][] */ 127,-26,-54,51,-16,13,78,32, 
  /* [8][0][][] */ 58,127,64,66,84,41,77,-91, 
  /* [9][0][][] */ 4,127,-111,-33,-1,45,-19,110, 
  /* [10][0][][] */ -103,-83,116,-66,24,70,-127,125, 
  /* [11][0][][] */ 20,-127,-105,-48,37,-14,88,-20, 
  /* [12][0][][] */ 64,-42,-127,-10,-117,-27,-75,-14, 
  /* [13][0][][] */ -15,16,-88,60,-127,-18,16,-18, 
  /* [14][0][][] */ -56,-31,-127,18,66,-3,-19,-61, 
  /* [15][0][][] */ 13,-69,-127,36,-100,-45,-56,-14, 
  /* [16][0][][] */ 127,-46,-11,85,-54,30,43,96, 
  /* [17][0][][] */ -17,127,106,-48,-45,-19,0,-59, 
  /* [18][0][][] */ -16,-127,45,48,8,-45,18,-74, 
  /* [19][0][][] */ 127,-23,-50,64,-63,7,36,93, 
  /* [20][0][][] */ -28,-86,84,81,-5,-127,-12,-72, 
  /* [21][0][][] */ -55,-64,-20,-79,94,-40,127,28, 
  /* [22][0][][] */ -127,14,-42,26,49,57,-37,-75, 
  /* [23][0][][] */ -58,-41,30,7,-71,115,127,-36, 
  /* [24][0][][] */ -12,65,-14,-16,-40,127,88,-28, 
  /* [25][0][][] */ -7,-119,-127,-51,4,14,-111,-43, 
  /* [26][0][][] */ 16,46,-17,117,-95,29,-127,-3, 
  /* [27][0][][] */ -26,-127,40,70,22,-61,-10,-104, 
  /* [28][0][][] */ -4,127,72,19,74,-30,7,-67, 
  /* [29][0][][] */ 37,3,-79,-39,57,-127,-53,20, 
  /* [30][0][][] */ 50,-20,45,-127,100,-45,50,-75, 
  /* [31][0][][] */ 3,-33,26,33,9,37,12,127, 
  /* [32][0][][] */ -92,21,60,11,-43,101,-8,127, 
  /* [33][0][][] */ -28,53,57,-36,2,127,-111,74, 
  /* [34][0][][] */ 46,112,-127,-43,-1,22,-60,47, 
  /* [35][0][][] */ 5,-127,32,-22,26,-9,54,-21, 
  /* [36][0][][] */ -14,13,-54,10,-127,-56,-43,35, 
  /* [37][0][][] */ -94,-107,112,127,-79,-105,23,-79, 
  /* [38][0][][] */ -63,17,34,-52,-127,-49,-22,72, 
  /* [39][0][][] */ 20,-108,62,127,31,-29,-38,-24, 
  /* [40][0][][] */ -16,41,10,75,-127,-2,-46,43, 
  /* [41][0][][] */ 79,127,-42,-72,6,35,-13,24, 
  /* [42][0][][] */ -48,-7,-48,55,127,25,12,35, 
  /* [43][0][][] */ 127,50,60,9,-46,4,33,125, 
  /* [44][0][][] */ 75,-7,-127,-20,44,-120,-97,-57, 
  /* [45][0][][] */ 127,36,39,9,114,-122,35,-123, 
  /* [46][0][][] */ 46,-58,-9,127,15,51,46,95, 
  /* [47][0][][] */ -12,-6,52,88,-127,14,86,-126, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.003333711763843894, 0.0034785938914865255, 0.0012331346515566111, 0.0019966238178312778, 0.0027536996640264988, 0.0059801870957016945, 0.0025933866854757071, 0.0019807559438049793, 0.0033223289065063, 0.0042202454060316086, 0.0018697705818340182, 0.0027490286156535149, 0.00075852061854675412, 0.0035046699922531843, 0.0030009520705789328, 0.0010574365733191371, 0.0046439114958047867, 0.0036424966529011726, 0.0048973457887768745, 0.0030906822066754103, 0.0043642562814056873, 0.0028679142706096172, 0.0053835948929190636, 0.00074048113310709596, 0.0039310376159846783, 0.0032998779788613319, 0.0019940300844609737, 0.0022728079929947853, 0.0026622151490300894, 0.0033808024600148201, 0.0039290306158363819, 0.0052332100458443165, 0.0029590476769953966, 0.0027810095343738794, 0.0048304791562259197, 0.0036928374320268631, 0.0025672917254269123, 0.0040301596745848656, 0.0032964667771011591, 0.0040522790513932705, 0.0032056127674877644, 0.0053808330558240414, 0.0048977560363709927, 0.0024503415916115046, 0.00094725401140749454, 0.0025163982063531876, 0.0056358780711889267, 0.0028808307833969593, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 4807, 15014, -9398, 5460, -3159, 2894, -12699, -9846, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00021063354506623, 0.00010039268818218261, 9.0318710135761648e-05, 0.00010749788634711877, 0.00012926805356983095, 8.7865242676343769e-05, 0.00016604995471425354, 0.00013390464300755411, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -41,12,23,14,-32,-8,10,1,-54,-1,-56,-52,-25,-49,14,-37,41,-40,30,51,-9,27,-58,13,-11,-42,60,-21,-6,5,18,12,75,37,27,-127,27,18,-9,-27,3,-9,56,49,43,21,33,12, 
  /* [1][0][][] */ 45,19,33,-22,-4,47,-41,-34,17,44,-24,-77,12,116,-22,20,-15,38,-28,-71,15,-64,6,17,-82,-18,-7,-127,-42,-20,34,-96,18,75,-39,-5,88,-52,-51,71,-50,42,-64,-14,121,-25,-40,-12, 
  /* [2][0][][] */ 2,-25,-71,4,18,78,47,27,5,38,-12,35,82,-76,-6,-49,48,-67,22,31,-21,53,22,16,-25,49,-15,-74,27,19,16,-88,-22,-68,40,19,82,42,-10,-56,11,27,102,42,127,22,25,2, 
  /* [3][0][][] */ -12,-13,-97,46,36,-43,-68,-100,43,12,-24,17,16,44,68,69,-9,12,-49,53,-25,-95,2,-57,-68,-31,115,-17,-56,18,-73,-12,-15,-73,14,-4,-25,-48,-43,127,-56,-35,6,11,54,4,-47,38, 
  /* [4][0][][] */ -35,-75,-16,26,45,-20,-42,-15,41,-22,101,-82,5,33,19,31,-19,-26,9,-36,-32,-38,-12,-15,10,5,49,53,56,17,-19,21,-19,-16,-11,10,-71,127,45,-33,7,-24,-9,-15,-69,7,116,23, 
  /* [5][0][][] */ 31,-38,-4,6,24,-71,49,-125,6,-29,-8,103,-79,74,-4,-62,3,-94,31,12,-76,84,-23,-76,-32,98,-26,-3,-11,56,-42,-42,1,43,62,-16,-34,45,-5,-49,7,-54,-55,18,-22,48,127,10, 
  /* [6][0][][] */ 35,-36,15,-13,-39,-19,-52,12,-35,6,-43,127,-50,-39,-2,61,-3,51,26,21,-2,-77,-42,11,18,53,-72,8,22,-47,3,50,-6,14,-36,0,27,23,6,-9,-5,-17,43,60,3,-21,59,-6, 
  /* [7][0][][] */ -17,-8,-24,71,18,9,4,30,13,-10,37,0,97,86,50,35,40,50,-21,-5,19,-14,-78,-24,-6,3,-42,45,21,1,-7,-10,51,-8,26,-84,-68,2,17,32,-7,14,74,127,-65,-10,-88,77, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0089519256725907326, 0.0042666890658438206, 0.0038385451771318913, 0.0045686601661145687, 0.005493891891092062, 0.0037342726718634367, 0.0070571228861808777, 0.0056909471750259399, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 10078, 8205, 4196, -2517, -21, 563, 1461, 28970, 1113, -1468, 5754, 48203, 596, 4911, -445, 9025, -1972, 22062, -1729, 15187, 15546, -763, 5556, -14666, 11716, 985, -6735, 15345, -289, 445, -8586, 12066, 6927, 588, -6378, 4345, -7746, 2128, -366, 20822, 1003, -2758, 3042, 430, 5281, -2517, 7244, 379, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00011200566223124042, 0.00011483191337902099, 0.00022104373783804476, 0.00019511606660671532, 0.00055059924488887191, 0.00016637482622172683, 0.00011391809675842524, 8.7803950009401888e-05, 0.00020562042482197285, 7.0517671701963991e-05, 5.2955532737541944e-05, 5.7215245760744438e-05, 0.00010789225780172274, 5.3854440920986235e-05, 0.00028134268359281123, 0.00021055313118267804, 9.223129745805636e-05, 0.0003975871077273041, 7.0947120548225939e-05, 9.709412552183494e-05, 9.6385105280205607e-05, 0.00030496297404170036, 0.00011584621097426862, 0.00021424800797831267, 0.00010601532267173752, 9.0320172603242099e-05, 7.5038136856164783e-05, 6.9932189944665879e-05, 0.000171714011230506, 0.00043425566400401294, 0.00024302394012920558, 8.1969577877316624e-05, 0.00012839474948123097, 0.00016505774692632258, 0.0001202811545226723, 8.4573061030823737e-05, 5.3009578550700098e-05, 6.9428671849891543e-05, 0.00017882710380945355, 5.978662011330016e-05, 0.00011760120105464011, 0.00017783760267775506, 6.9805020757485181e-05, 0.00012095722922822461, 5.6387129006907344e-05, 0.00021084440231788903, 5.8393121435074136e-05, 0.00018104577611666173, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -49,-99,3,-77,127,-96,61,-64,-39,-62,-8,5,127,28,77,-74,118,-82,9,-23,-105,63,-64,81,-27,71,33,-42,82,-56,13,-48,-87,-81,68,73,31,66,58,-70,-108,6,38,79,35,-109,77,85, -56,-127,-127,124,-108,93,93,-34,-53,26,46,-115,87,82,56,-37,-63,-127,94,-98,-127,65,-40,110,-89,75,70,-111,95,-112,34,-99,-52,-70,127,127,70,93,127,-67,-127,-70,52,66,57,101,110,11, -35,-31,-65,28,-75,-21,24,-3,61,16,85,-48,-7,86,-55,1,-127,-31,63,-45,-2,47,-123,46,-117,28,72,-85,31,52,103,-76,-1,16,-5,19,97,89,43,-16,-36,89,84,38,64,31,47,-127, 
  /* [0][1][][] */ -46,-125,-39,-101,-55,-99,50,-127,-127,-127,109,-57,95,65,-127,-91,122,-109,-99,-101,-42,127,-113,18,-2,36,127,-77,-127,-127,-16,-51,-41,-127,-106,90,59,91,-31,-109,62,-52,79,127,91,127,127,-106, -47,-68,-74,-66,-6,127,127,-90,74,52,127,-127,72,127,62,-127,90,-108,-127,-127,-113,78,-127,127,-114,127,110,-127,-106,116,-11,-127,-127,-83,81,84,127,127,-77,-127,90,-46,127,84,127,7,123,110, -40,-41,-64,123,86,-49,43,-42,17,56,60,-52,-5,39,49,-4,-35,10,-52,-82,-47,82,-67,1,-127,18,50,-90,-66,50,127,-100,-54,-9,65,88,104,73,-27,-69,20,127,83,13,60,-56,44,43, 
  /* [0][2][][] */ -127,-87,19,127,-55,-48,-39,-40,23,-44,37,-58,34,22,36,-46,-70,-25,97,-122,-40,68,-63,-17,-4,64,72,-46,50,100,-38,-45,-74,-104,-20,70,50,41,-58,-48,8,-34,65,33,61,55,28,-37, -27,-57,-20,-31,110,100,18,-40,45,54,-18,-48,7,49,-119,-114,21,-31,71,-114,-89,15,-78,75,-100,88,79,-63,37,18,-48,-76,-35,-50,-85,68,88,42,-55,-14,22,-35,107,96,76,-99,37,-76, -40,2,-21,-55,-21,-21,4,-19,-106,24,24,-52,1,27,27,-47,33,26,22,-86,-121,1,-28,-73,-75,90,28,-56,9,-70,58,-54,-49,-1,26,61,19,49,1,-52,-6,90,22,16,28,-15,33,45, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0047602406702935696, 0.0048803561367094517, 0.0093943588435649872, 0.0082924328744411469, 0.02340046688914299, 0.0070709297433495522, 0.0048415190540254116, 0.0037316677626222372, 0.0087388679385185242, 0.0029970009345561266, 0.002250610152259469, 0.002431647852063179, 0.0045854207128286362, 0.0022888137027621269, 0.011957064270973206, 0.0089485077187418938, 0.0039198300801217556, 0.016897451132535934, 0.0030152525287121534, 0.0041265003383159637, 0.0040963669307529926, 0.012960925698280334, 0.004923463799059391, 0.0091055398806929588, 0.0045056510716676712, 0.0038386071100831032, 0.0031891206745058298, 0.0029721180908381939, 0.0072978455573320389, 0.018455864861607552, 0.01032851729542017, 0.0034837068524211645, 0.0054567768238484859, 0.0070149539969861507, 0.0051119490526616573, 0.003594354959204793, 0.0022529070265591145, 0.0029507186263799667, 0.0076001519337296486, 0.0025409313384443521, 0.0049980510957539082, 0.0075580980628728867, 0.0029667133931070566, 0.0051406822167336941, 0.0023964529391378164, 0.0089608868584036827, 0.0024817076046019793, 0.0076944455504417419, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1745, -487, -657, 2643, 13147, 2859, -431, 2542, 3101, 730, 53, 2793, 896, 307, -240, -66, 2046, 13032, 1332, -403, 972, -1037, -412, 3825, -402, -574, 1573, -27, 3722, 9440, 3227, -360, 259, -590, 2080, -590, 56, -499, 2426, 538, 1508, 3574, -3, -581, 68, 1151, 1085, 446, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00032066353014670312, 0.00033114143298007548, 0.00031433763797394931, 0.0002539820852689445, 8.1222358858212829e-05, 0.00031376763945445418, 0.00069782411446794868, 0.00029063623514957726, 0.00022650366008747369, 0.00075266824569553137, 0.0005376233602873981, 0.00027174042770639062, 0.00023762542696204036, 0.00051964569138363004, 0.00046620916691608727, 0.00050820584874600172, 0.00032946016290225089, 8.0597579653840512e-05, 0.00044278291170485318, 0.00039981675217859447, 0.00045796012273058295, 0.00020596401009242982, 0.0004089365538675338, 0.00023956506629474461, 0.00043623868259601295, 0.00073414720827713609, 0.00034171252627857029, 0.0011190349468961358, 0.00023352667631115764, 0.0001031982756103389, 0.00025697323144413531, 0.00063660216983407736, 0.00050016626482829452, 0.00036522667505778372, 0.00039142300374805927, 0.00031382430461235344, 0.00048371058073826134, 0.00049776240484789014, 0.00028049814864061773, 0.00061378837563097477, 0.00040688892477191985, 0.00024574133567512035, 0.00045474374201148748, 0.00042451164335943758, 0.00069828017149120569, 0.00039021635893732309, 0.00035280012525618076, 0.00035875101457349956, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -35,-12,-20,-85,-121,-93,-127,47, 
  /* [1][0][][] */ 78,-58,-43,-77,127,-101,90,-14, 
  /* [2][0][][] */ -77,127,-59,-92,55,17,-57,64, 
  /* [3][0][][] */ 60,24,60,37,61,67,127,-36, 
  /* [4][0][][] */ -5,-127,72,29,-40,-112,-14,-33, 
  /* [5][0][][] */ 127,-5,17,50,-60,-14,21,-21, 
  /* [6][0][][] */ 25,26,127,-7,27,-16,-39,48, 
  /* [7][0][][] */ 52,-1,-127,-17,-65,90,126,-94, 
  /* [8][0][][] */ -22,127,-33,-8,38,88,17,66, 
  /* [9][0][][] */ 10,127,-55,47,35,-79,58,77, 
  /* [10][0][][] */ 25,-127,32,-31,-52,-96,-62,-64, 
  /* [11][0][][] */ -127,-107,124,37,-46,-94,107,49, 
  /* [12][0][][] */ -49,69,-127,60,45,-35,-85,104, 
  /* [13][0][][] */ 127,-105,98,113,28,40,36,-36, 
  /* [14][0][][] */ -21,93,-41,-127,4,-67,10,-55, 
  /* [15][0][][] */ 6,92,18,-3,6,-76,83,-127, 
  /* [16][0][][] */ -51,-127,-17,71,-11,69,-8,100, 
  /* [17][0][][] */ -17,-116,-127,84,-65,77,-65,74, 
  /* [18][0][][] */ -54,-22,-19,127,11,87,28,102, 
  /* [19][0][][] */ 57,-124,87,-127,32,-64,32,-12, 
  /* [20][0][][] */ 17,48,29,11,13,127,43,4, 
  /* [21][0][][] */ 62,126,49,-47,91,-72,102,-127, 
  /* [22][0][][] */ 34,18,118,18,-13,127,33,-6, 
  /* [23][0][][] */ -127,-79,5,-105,65,43,-53,-94, 
  /* [24][0][][] */ -93,-73,47,-105,78,97,-22,-127, 
  /* [25][0][][] */ 127,8,-48,-21,36,34,-42,-10, 
  /* [26][0][][] */ -123,-29,-127,-28,-42,-38,5,-14, 
  /* [27][0][][] */ 68,37,-4,-37,-127,-38,80,88, 
  /* [28][0][][] */ -105,-32,-11,38,-76,-127,-5,-12, 
  /* [29][0][][] */ 127,107,4,-48,50,24,-56,-78, 
  /* [30][0][][] */ -53,-127,20,-70,45,75,-12,-79, 
  /* [31][0][][] */ 75,26,-5,127,-5,-74,29,-8, 
  /* [32][0][][] */ -19,127,15,13,50,47,-54,21, 
  /* [33][0][][] */ -5,127,-78,29,48,-12,-25,20, 
  /* [34][0][][] */ -117,-48,-33,48,42,-14,-21,127, 
  /* [35][0][][] */ -60,127,-34,-10,39,115,51,77, 
  /* [36][0][][] */ 81,30,-17,-57,-127,-32,99,122, 
  /* [37][0][][] */ -56,117,39,29,-127,84,-30,-103, 
  /* [38][0][][] */ 21,29,27,-37,127,80,74,56, 
  /* [39][0][][] */ -25,-71,58,-36,2,22,-127,115, 
  /* [40][0][][] */ -127,-46,-69,112,-39,5,35,59, 
  /* [41][0][][] */ 127,9,75,78,-44,11,-9,-1, 
  /* [42][0][][] */ -36,4,-53,-108,49,-127,-10,58, 
  /* [43][0][][] */ 31,-8,94,-5,41,127,83,12, 
  /* [44][0][][] */ -13,-23,-51,127,30,-2,-47,-40, 
  /* [45][0][][] */ 59,127,89,-79,52,-24,-13,-127, 
  /* [46][0][][] */ -24,-121,-51,41,-13,23,-58,127, 
  /* [47][0][][] */ 46,43,73,-13,83,109,127,-68, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00301701994612813, 0.0031156030017882586, 0.0029575016815215349, 0.0023896356578916311, 0.00076419505057856441, 0.0029521386604756117, 0.0065656024962663651, 0.0027345027774572372, 0.002131100045517087, 0.0070816134102642536, 0.00505832489579916, 0.0025567181874066591, 0.0022357411216944456, 0.0048891790211200714, 0.0043864119797945023, 0.0047815451398491859, 0.0030997844878584146, 0.00075831665890291333, 0.004166001919656992, 0.0037617471534758806, 0.0043087992817163467, 0.0019378490978851914, 0.0038475524634122849, 0.0022539906203746796, 0.0041044293902814388, 0.006907354574650526, 0.0032150631304830313, 0.010528639890253544, 0.0021971773821860552, 0.00097095937235280871, 0.0024177783634513617, 0.0059895850718021393, 0.0047059035860002041, 0.0034363002050668001, 0.0036827730946242809, 0.002952671842649579, 0.0045510772615671158, 0.0046832864172756672, 0.0026391167193651199, 0.0057749371044337749, 0.0038282868918031454, 0.0023121011909097433, 0.0042785373516380787, 0.0039940932765603065, 0.0065698935650289059, 0.0036714200396090746, 0.0033193826675415039, 0.0033753728494048119, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7786, -3136, 17584, -12073, 21351, 10080, -4451, 12324, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.000181888448423706, 0.0002340938663110137, 0.00016806571511551738, 0.00020085106370970607, 0.00015305321721825749, 0.00016693788347765803, 0.00014990508498158306, 0.00025033540441654623, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 9,-6,-19,-70,-14,-25,33,-50,41,19,-17,-9,104,127,-19,-83, 
  /* [1][0][][] */ 127,-50,-43,29,-41,62,-61,-51,-39,71,-24,-45,-15,14,-45,-16, 
  /* [2][0][][] */ -71,-83,50,59,36,-92,-109,-34,36,-74,26,-127,51,-8,-80,33, 
  /* [3][0][][] */ 33,1,-2,13,9,91,-89,-9,127,51,16,21,22,-11,4,8, 
  /* [4][0][][] */ -73,-23,-16,-127,-35,31,42,-108,18,-33,-39,-33,-116,53,-50,-1, 
  /* [5][0][][] */ 67,54,70,-5,52,-38,-127,-127,-19,-67,55,36,-47,41,70,-49, 
  /* [6][0][][] */ 104,42,-127,-90,46,-75,-3,-66,-30,36,-124,73,73,-72,14,49, 
  /* [7][0][][] */ -127,-5,99,-5,-55,10,1,-63,-44,61,82,-13,50,-31,11,19, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0077302586287260056, 0.0099489893764257431, 0.007142792921513319, 0.0085361702367663383, 0.0065047615207731724, 0.0070948596112430096, 0.0063709658570587635, 0.010639254935085773, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 23071, -283, 2029, 4273, -340, 561, 7382, 1864, 1189, 112, -447, 5219, 686, 804, 0, -333, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00010124197433469817, 0.00018266381812281907, 0.00011971285130130127, 0.00018664565868675709, 0.0013154363259673119, 0.00087190396152436733, 0.00020666830823756754, 0.00081500265514478087, 0.00030833564233034849, 0.0013826584909111261, 0.00014927946904208511, 0.00016100803622975945, 0.0001080757356248796, 0.00047540507512167096, 0.00023910874733701348, 0.00038343720370903611, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 1,-13,17,26,-18,11,11,10,-11,-8,-12,-20,-26,-14,17,-4, 27,-15,-1,23,17,-3,1,-27,-8,11,-22,69,-15,18,-29,4, 5,-12,-9,11,2,-14,-14,8,0,1,-15,-2,1,-7,-3,1, 
  /* [0][1][][] */ -5,-21,52,-3,127,-22,-127,-21,127,127,28,3,113,-28,-4,-32, -127,127,127,5,-90,-90,2,-103,5,-105,127,127,127,127,127,127, 11,-14,-13,16,-18,127,28,-10,-10,-12,-11,-17,-8,-8,-33,-18, 
  /* [0][2][][] */ 11,0,-4,-36,-19,16,64,9,-8,-9,-25,-11,8,-7,0,-22, 35,-20,-25,-127,10,-16,0,127,3,0,-28,-9,-16,-68,-43,-48, 1,-5,-6,-5,-5,-3,6,-1,2,-1,-22,-12,3,-15,-23,-19, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0043027838692069054, 0.0077632120810449123, 0.0050877961330115795, 0.0079324403777718544, 0.055906042456626892, 0.037055917084217072, 0.0087834028527140617, 0.034637611359357834, 0.013104264624416828, 0.058762986212968826, 0.0063443775288760662, 0.0068428413942456245, 0.0045932186767458916, 0.020204715430736542, 0.010162121616303921, 0.016296081244945526, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1999, 155, 92, 3180, 71851, 59816, 5058, 4308, 4612, 5044, 1503, -217, 5227, 14423, 706, 68752, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00019766805053222924, 0.00088471913477405906, 0.00033136917045339942, 0.00012661660730373114, 2.4246122848126106e-05, 3.028220271517057e-05, 0.00015443489246536046, 3.823681254289113e-05, 0.00017655461851973087, 3.4274791687494144e-05, 0.00051056005759164691, 0.00072015833575278521, 0.00035450229188427329, 1.8186339730164036e-05, 0.00053973996546119452, 3.9276303141377866e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -84, -112, -31, 
  /* [0][1][][] */ 71, -39, 15, 
  /* [0][2][][] */ 36, 127, 18, 
  /* [1][0][][] */ 102, -95, -11, 
  /* [1][1][][] */ -127, 105, 25, 
  /* [1][2][][] */ 12, -1, -9, 
  /* [2][0][][] */ -22, 1, -45, 
  /* [2][1][][] */ 36, 96, 127, 
  /* [2][2][][] */ -15, -98, -83, 
  /* [3][0][][] */ 121, 126, 59, 
  /* [3][1][][] */ 4, -19, -12, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ -5, -48, 3, 
  /* [4][1][][] */ 13, -127, -16, 
  /* [4][2][][] */ 29, -83, -22, 
  /* [5][0][][] */ -57, 1, -11, 
  /* [5][1][][] */ -127, 42, 26, 
  /* [5][2][][] */ -112, 17, 8, 
  /* [6][0][][] */ -26, 84, 127, 
  /* [6][1][][] */ -58, 59, -19, 
  /* [6][2][][] */ -29, -51, -92, 
  /* [7][0][][] */ 24, 14, -22, 
  /* [7][1][][] */ 127, 44, -29, 
  /* [7][2][][] */ 18, -9, 3, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -87, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -14, 70, 1, 
  /* [9][1][][] */ -19, 127, -32, 
  /* [9][2][][] */ -9, 94, -21, 
  /* [10][0][][] */ 25, 87, 12, 
  /* [10][1][][] */ -38, -127, -30, 
  /* [10][2][][] */ 9, 38, 16, 
  /* [11][0][][] */ 6, -19, 9, 
  /* [11][1][][] */ 63, -92, 35, 
  /* [11][2][][] */ -84, 127, -44, 
  /* [12][0][][] */ -41, 48, -9, 
  /* [12][1][][] */ -127, 112, 6, 
  /* [12][2][][] */ -80, 77, 5, 
  /* [13][0][][] */ 63, -9, -60, 
  /* [13][1][][] */ 89, 42, -50, 
  /* [13][2][][] */ 127, 99, 50, 
  /* [14][0][][] */ -29, -27, 47, 
  /* [14][1][][] */ 45, 99, -127, 
  /* [14][2][][] */ -17, -70, 79, 
  /* [15][0][][] */ -127, -46, -3, 
  /* [15][1][][] */ -116, -109, 31, 
  /* [15][2][][] */ -81, -84, -2, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.050405349582433701, 0.2256033718585968, 0.084499135613441467, 0.032287232577800751, 0.0061827609315514565, 0.0077219610102474689, 0.039380896836519241, 0.0097503867000341415, 0.045021425932645798, 0.0087400712072849274, 0.13019280135631561, 0.18364036083221436, 0.09039808064699173, 0.0046375165693461895, 0.13763368129730225, 0.010015456937253475, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,100,100,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,100,100,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,100,100,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10628485679626465, } };
const TfArray<1, int> quant46_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,100,100,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,101,101,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,50,50,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,50,50,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.067575827240943909, } };
const TfArray<1, int> quant50_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,50,50,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,50,50,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,50,50,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.088821291923522949, } };
const TfArray<1, int> quant53_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,50,50,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.090735778212547302, } };
const TfArray<1, int> quant54_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,50,50,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,51,51,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,25,25,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.057694070041179657, } };
const TfArray<1, int> quant58_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,25,25,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,25,25,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,25,25,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.05268043652176857, } };
const TfArray<1, int> quant61_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,25,25,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.075109146535396576, } };
const TfArray<1, int> quant62_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,25,25,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,25,25,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,25,25,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.076178580522537231, } };
const TfArray<1, int> quant65_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,25,25,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.10260862112045288, } };
const TfArray<1, int> quant66_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,25,25,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,25,25,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.073280252516269684, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,25,25,11 } };
const TfArray<1, float> quant69_scale = { 1, { 0.224639892578125, } };
const TfArray<1, int> quant69_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,25,25,11 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 40000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 44, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 160000), (TfLiteIntArray*)&g0::tensor_dimension44, 160000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 160000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 160000), (TfLiteIntArray*)&g0::tensor_dimension46, 80000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 489648), (TfLiteIntArray*)&g0::tensor_dimension47, 480000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 489648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 489648), (TfLiteIntArray*)&g0::tensor_dimension49, 120000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 240000), (TfLiteIntArray*)&g0::tensor_dimension50, 20000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 120000), (TfLiteIntArray*)&g0::tensor_dimension51, 120000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 120000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 120000), (TfLiteIntArray*)&g0::tensor_dimension53, 20000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 20000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 124848), (TfLiteIntArray*)&g0::tensor_dimension55, 120000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 124848, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 124848), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 154848), (TfLiteIntArray*)&g0::tensor_dimension58, 10000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 60000), (TfLiteIntArray*)&g0::tensor_dimension59, 60000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 60000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 60000), (TfLiteIntArray*)&g0::tensor_dimension61, 10000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 120000), (TfLiteIntArray*)&g0::tensor_dimension62, 10000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 60000), (TfLiteIntArray*)&g0::tensor_dimension63, 60000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 60000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 70000), (TfLiteIntArray*)&g0::tensor_dimension65, 10000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 60000), (TfLiteIntArray*)&g0::tensor_dimension66, 10000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 60000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 60000), (TfLiteIntArray*)&g0::tensor_dimension68, 20000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6880), (TfLiteIntArray*)&g0::tensor_dimension69, 6875, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 6875, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
